/*******************************************************************************
 *
 * No License
 * 
 * This work is under exclusive copyright (c) Baxter AI (baxterai.com). 
 * Nobody else can use, copy, distribute, or modify this work without being 
 * at risk of take-downs, shake-downs, or litigation. 
 * 
 * By publishing this source code in a public repository on GitHub, Terms of 
 * Service have been accepted by which Baxter AI have allowed others to view 
 * and fork their repository.
 * 
 * If you find software that doesn't have a license, that generally means you 
 * have no permission from the creators of the software to use, modify, or 
 * share the software. Although a code host such as GitHub may allow you to 
 * view and fork the code, this does not imply that you are permitted to use, 
 * modify, or share the software for any purpose.
 *
 * This notice has been derived from https://choosealicense.com/no-permission 
 * (https://web.archive.org/web/20180312144938/https://choosealicense.com/no-permission)
 *
 *******************************************************************************/

/*******************************************************************************
 *
 * File Name: LRPpreprocessorWordClass.hpp
 * Author: Richard Bruce Baxter - Copyright (c) 2005-2021 Baxter AI (baxterai.com)
 * Project: Language Reduction Preprocessor
 * Project Version: 3p3a 19-March-2021
 * Requirements: requires plain text file
 * Description: Preprocessor Word Class
 * /
 *******************************************************************************/


#ifndef HEADER_LRP_PREPROCESSOR_WORD_CLASS
#define HEADER_LRP_PREPROCESSOR_WORD_CLASS

#include "SHAREDglobalDefs.hpp"
#include "LRPglobalDefs.hpp"
#ifdef USE_SANI
#include "SANIglobalDefs.hpp"
#endif
#ifdef USE_GIA
#include "GIAglobalDefs.hpp"
#endif


#ifdef USE_GIA
#ifdef LRP_PREPROCESSOR_RECORD_REFERENCES
#include "GIAentityNodeClass.hpp"
#include "GIAsentenceClass.hpp"
#endif
#endif
#ifdef LRP_PREPROCESSOR_POS_TAGGER_DATABASE_NEURAL_NETWORK_EXTERNAL
#include "ANNexperienceClass.hpp"
#endif
#include "SHAREDvars.hpp"
#ifdef USE_GIA
#include "GIAsynRelTranslatorDefs.hpp"	
#include "GIAsemRelTranslatorDefs.hpp"	//required for LRP_PREPROCESSOR_POS_TYPE and GIA_POS_REL_TRANSLATOR_HYBRID_PREFERENCE_NLP_PRELIM_POS_TAGS_OVER_LRP_WORD_TYPE_LISTS	
#endif




//each other, one another?
//pronounReflexive, pronounPossessiveAlone, pronounPossessiveAdjective, pronounPersonalSubject, pronounPersonalObject
#define GIA_TRANSLATOR_PRONOUN_SINGULAR_FIRST_PERSON_NUMBER_OF_TYPES (5)
static string GIAtranslatorPronounSingularFirstPersonArray[GIA_TRANSLATOR_PRONOUN_SINGULAR_FIRST_PERSON_NUMBER_OF_TYPES] = {"myself", "mine", "my", "I", "me"};	
#define GIA_TRANSLATOR_PRONOUN_SINGULAR_SECOND_PERSON_NUMBER_OF_TYPES (5)
static string GIAtranslatorPronounSingularSecondPersonArray[GIA_TRANSLATOR_PRONOUN_SINGULAR_SECOND_PERSON_NUMBER_OF_TYPES] = {"yourself", "yours", "your", "you", "you"};
#define GIA_TRANSLATOR_PRONOUN_SINGULAR_THIRD_PERSON_GENDER_MALE_NUMBER_OF_TYPES (5)
static string GIAtranslatorPronounSingularThirdPersonGenderMaleArray[GIA_TRANSLATOR_PRONOUN_SINGULAR_THIRD_PERSON_GENDER_MALE_NUMBER_OF_TYPES] = {"himself", "his", "his", "he", "him"};
#define GIA_TRANSLATOR_PRONOUN_SINGULAR_THIRD_PERSON_GENDER_FEMALE_NUMBER_OF_TYPES (5)
static string GIAtranslatorPronounSingularThirdPersonGenderFemaleArray[GIA_TRANSLATOR_PRONOUN_SINGULAR_THIRD_PERSON_GENDER_FEMALE_NUMBER_OF_TYPES] = {"herself", "hers", "her", "she", "her"};
#define GIA_TRANSLATOR_PRONOUN_SINGULAR_THIRD_PERSON_NUMBER_OF_TYPES (4)
static string GIAtranslatorPronounSingularThirdPersonArray[GIA_TRANSLATOR_PRONOUN_SINGULAR_THIRD_PERSON_NUMBER_OF_TYPES] = {"itself", "its", "it", "it"};
#define GIA_TRANSLATOR_PRONOUN_PLURAL_FIRST_PERSON_NUMBER_OF_TYPES (5)
static string GIAtranslatorPronounPluralFirstPersonArray[GIA_TRANSLATOR_PRONOUN_PLURAL_FIRST_PERSON_NUMBER_OF_TYPES] = {"ourselves", "ours", "our", "we", "us"};
#define GIA_TRANSLATOR_PRONOUN_PLURAL_SECOND_PERSON_NUMBER_OF_TYPES (5)
static string GIAtranslatorPronounPluralSecondPersonArray[GIA_TRANSLATOR_PRONOUN_PLURAL_SECOND_PERSON_NUMBER_OF_TYPES] = {"yourselves", "yours", "your", "you", "you"};
#define GIA_TRANSLATOR_PRONOUN_PLURAL_THIRD_PERSON_NUMBER_OF_TYPES (5)
static string GIAtranslatorPronounPluralThirdPersonArray[GIA_TRANSLATOR_PRONOUN_PLURAL_THIRD_PERSON_NUMBER_OF_TYPES] = {"themselves", "theirs", "their", "they", "them"};


#define LRP_PREPROCESSOR_WORD_LIST_INDEX_NO_REQUIREMENT (INT_DEFAULT_VALUE)

#define GIA_TRANSLATOR_ENGLISH_NUMBERS_NUMBER_OF_TYPES (33)
static string translatorEnglishNumbersArray[GIA_TRANSLATOR_ENGLISH_NUMBERS_NUMBER_OF_TYPES] = {"zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "ten", "eleven", "twelve", "thirteen", "fourteen", "fifteen", "sixteen", "seventeen", "eighteen", "nineteen", "twenty", "thirty", "forty", "fifty", "sixty", "seventy", "eighty", "ninety", "hundred", "thousand", "million", "billion", "trillion"};
#define GIA_TRANSLATOR_ENGLISH_NUMBERS_DELIMITER "and"

#define GIA_TRANSLATOR_ENGLISH_NUMBERS_NUMERALS_NUMBER_OF_TYPES (29)
#define GIA_TRANSLATOR_ENGLISH_NUMBERS_MAGITUDES_NUMBER_OF_TYPES (4)
static string translatorEnglishNumbersNumeralsTextArray[GIA_TRANSLATOR_ENGLISH_NUMBERS_NUMERALS_NUMBER_OF_TYPES] = { "zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "ten", "eleven", "twelve", "thirteen", "fourteen", "fifteen", "sixteen", "seventeen", "eighteen", "ninteen", "twenty", "thirty", "forty", "fifty", "sixty", "seventy", "eighty", "ninety", "hundred" };
static int64_t translatorEnglishNumbersNumeralsNumberArray[GIA_TRANSLATOR_ENGLISH_NUMBERS_NUMERALS_NUMBER_OF_TYPES] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 30, 40, 50, 60, 70, 80, 90, 100 };
static string translatorEnglishNumbersMagnitudesTextArray[GIA_TRANSLATOR_ENGLISH_NUMBERS_MAGITUDES_NUMBER_OF_TYPES] = { "trillion", "billion", "million", "thousand" };
static int64_t translatorEnglishNumbersMagnitudesNumberArray[GIA_TRANSLATOR_ENGLISH_NUMBERS_MAGITUDES_NUMBER_OF_TYPES] = { 1000000000000L, 1000000000L, 1000000L, 1000L };

#define GIA_TRANSLATOR_ENGLISH_NUMBERS_NUMERICAL_NUMBER_OF_TYPES (10)
static char translatorEnglishNumbersNumericalArray[GIA_TRANSLATOR_ENGLISH_NUMBERS_NUMERICAL_NUMBER_OF_TYPES] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9'};
#define GIA_TRANSLATOR_ENGLISH_NUMBERS_NUMERICAL_FRACTIONAL_NUMBER_OF_TYPES (11)
static char translatorEnglishNumbersNumericalFractionalArray[GIA_TRANSLATOR_ENGLISH_NUMBERS_NUMERICAL_FRACTIONAL_NUMBER_OF_TYPES] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '.'};



#define LRP_PREPROCESSOR_POS_TYPE_UNDEFINED (LRP_SHARED_POS_TYPE_UNDEFINED)	//NOTUSED
#define LRP_PREPROCESSOR_POS_TYPE_CONJUNCTION (LRP_SHARED_POS_TYPE_CONJUNCTION)	//NOTUSED
#define LRP_PREPROCESSOR_POS_TYPE_NUMBER (LRP_SHARED_POS_TYPE_NUMBER)
#define LRP_PREPROCESSOR_POS_TYPE_DETERMINER (LRP_SHARED_POS_TYPE_DETERMINER)
#define LRP_PREPROCESSOR_POS_TYPE_UNKNOWN (LRP_SHARED_POS_TYPE_UNKNOWN)		//NOTUSED
#define LRP_PREPROCESSOR_POS_TYPE_PREDETERMINER (LRP_SHARED_POS_TYPE_PREDETERMINER)	//all predeterminers are ambiguous (need to compensate for this in POS tagger database)
#define LRP_PREPROCESSOR_POS_TYPE_POSSESSIVEENDING (LRP_SHARED_POS_TYPE_POSSESSIVEENDING)
#define LRP_PREPROCESSOR_POS_TYPE_MODALAUXILIARY (LRP_SHARED_POS_TYPE_MODALAUXILIARY)
#define LRP_PREPROCESSOR_POS_TYPE_PREPOSITION (LRP_SHARED_POS_TYPE_PREPOSITION)
#define LRP_PREPROCESSOR_POS_TYPE_ADJECTIVE (LRP_SHARED_POS_TYPE_ADJECTIVE)
#define LRP_PREPROCESSOR_POS_TYPE_NOUN (LRP_SHARED_POS_TYPE_NOUN)
#define LRP_PREPROCESSOR_POS_TYPE_ADVERB (LRP_SHARED_POS_TYPE_ADVERB)
#define LRP_PREPROCESSOR_POS_TYPE_PRONOUN_PERSONAL (LRP_SHARED_POS_TYPE_PRONOUN_PERSONAL)	//NOTUSED
#define LRP_PREPROCESSOR_POS_TYPE_PRONOUN_POSSESSIVE (LRP_SHARED_POS_TYPE_PRONOUN_POSSESSIVE)	//NOTUSED
#define LRP_PREPROCESSOR_POS_TYPE_PARTICLE (LRP_SHARED_POS_TYPE_PARTICLE)	//NOTUSED
#define LRP_PREPROCESSOR_POS_TYPE_INTERJECTION (LRP_SHARED_POS_TYPE_INTERJECTION)
#define LRP_PREPROCESSOR_POS_TYPE_VERB (LRP_SHARED_POS_TYPE_VERB)
#define LRP_PREPROCESSOR_POS_TYPE_WH (LRP_SHARED_POS_TYPE_WH)
#define LRP_PREPROCESSOR_POS_TYPE_PUNCTUATION_QUOTE (LRP_SHARED_POS_TYPE_PUNCTUATION_QUOTE)
#define LRP_PREPROCESSOR_POS_TYPE_PUNCTUATION_DIVISION (LRP_SHARED_POS_TYPE_PUNCTUATION_DIVISION)
#define LRP_PREPROCESSOR_POS_TYPE_PUNCTUATION_END_OF_SENTENCE (LRP_SHARED_POS_TYPE_PUNCTUATION_END_OF_SENTENCE)
#define LRP_PREPROCESSOR_POS_TYPE_AUXILIARY_BEING (LRP_SHARED_POS_TYPE_AUXILIARY_BEING)
#define LRP_PREPROCESSOR_POS_TYPE_AUXILIARY_HAVING (LRP_SHARED_POS_TYPE_AUXILIARY_HAVING)
#define LRP_PREPROCESSOR_POS_TYPE_AUXILIARY_DOING (LRP_SHARED_POS_TYPE_AUXILIARY_DOING)
#define LRP_PREPROCESSOR_POS_TYPE_AUXILIARY (LRP_SHARED_POS_TYPE_AUXILIARY)
#define LRP_PREPROCESSOR_POS_TYPE_PRONOUN_DEMONSTRATIVE (LRP_SHARED_POS_TYPE_PRONOUN_DEMONSTRATIVE)
#define LRP_PREPROCESSOR_POS_TYPE_PRONOUN_INDEFINITE (LRP_SHARED_POS_TYPE_PRONOUN_INDEFINITE)
#define LRP_PREPROCESSOR_POS_TYPE_PRONOUN_INTERROGATIVE (LRP_SHARED_POS_TYPE_PRONOUN_INTERROGATIVE)
#define LRP_PREPROCESSOR_POS_TYPE_PRONOUN_PERSONAL_OBJECT (LRP_SHARED_POS_TYPE_PRONOUN_PERSONAL_OBJECT)
#define LRP_PREPROCESSOR_POS_TYPE_PRONOUN_PERSONAL_SUBJECT (LRP_SHARED_POS_TYPE_PRONOUN_PERSONAL_SUBJECT)
#define LRP_PREPROCESSOR_POS_TYPE_PRONOUN_POSSESSIVE_ADJECTIVE (LRP_SHARED_POS_TYPE_PRONOUN_POSSESSIVE_ADJECTIVE)
#define LRP_PREPROCESSOR_POS_TYPE_PRONOUN_POSSESSIVE_ALONE (LRP_SHARED_POS_TYPE_PRONOUN_POSSESSIVE_ALONE)
#define LRP_PREPROCESSOR_POS_TYPE_PRONOUN_REFLEXIVE (LRP_SHARED_POS_TYPE_PRONOUN_REFLEXIVE)
#define LRP_PREPROCESSOR_POS_TYPE_PRONOUN_RELATIVE (LRP_SHARED_POS_TYPE_PRONOUN_RELATIVE)
#define LRP_PREPROCESSOR_POS_TYPE_CONJUNCTION_COORDINATING (LRP_SHARED_POS_TYPE_CONJUNCTION_COORDINATING)
#define LRP_PREPROCESSOR_POS_TYPE_CONJUNCTION_SUBCOORDINATING (LRP_SHARED_POS_TYPE_CONJUNCTION_SUBCOORDINATING)
#define LRP_PREPROCESSOR_POS_TYPE_CONJUNCTION_CORRELATIVE_FIRST (LRP_SHARED_POS_TYPE_CONJUNCTION_CORRELATIVE_FIRST)
#define LRP_PREPROCESSOR_POS_TYPE_CONJUNCTION_CORRELATIVE_SECOND (LRP_SHARED_POS_TYPE_CONJUNCTION_CORRELATIVE_SECOND)
#define LRP_PREPROCESSOR_POS_TYPE_DATE (LRP_SHARED_POS_TYPE_DATE)
#define LRP_PREPROCESSOR_POS_TYPE_UNIT (LRP_SHARED_POS_TYPE_UNIT)
#define LRP_PREPROCESSOR_POS_TYPE_MONEY (LRP_SHARED_POS_TYPE_MONEY)
#define LRP_PREPROCESSOR_POS_TYPE_TITLE (LRP_SHARED_POS_TYPE_TITLE)
#define LRP_PREPROCESSOR_POS_TYPE_PROPERNOUN_FIRST_MALE (LRP_SHARED_POS_TYPE_PROPERNOUN_FIRST_MALE)
#define LRP_PREPROCESSOR_POS_TYPE_PROPERNOUN_FIRST_FEMALE (LRP_SHARED_POS_TYPE_PROPERNOUN_FIRST_FEMALE)
#define LRP_PREPROCESSOR_POS_TYPE_PROPERNOUN_FAMILY (LRP_SHARED_POS_TYPE_PROPERNOUN_FAMILY)
#define LRP_PREPROCESSOR_POS_TYPE_PROPERNOUN_PLACE (LRP_SHARED_POS_TYPE_PROPERNOUN_PLACE)
#define LRP_PREPROCESSOR_POS_TYPE_POSINSERTTEMPLATE5 (LRP_SHARED_POS_TYPE_POSINSERTTEMPLATE5)
#define LRP_PREPROCESSOR_POS_TYPE_POSINSERTTEMPLATE6 (LRP_SHARED_POS_TYPE_POSINSERTTEMPLATE6)
#define LRP_PREPROCESSOR_POS_TYPE_POSINSERTTEMPLATE7 (LRP_SHARED_POS_TYPE_POSINSERTTEMPLATE7)
#define LRP_PREPROCESSOR_POS_TYPE_POSINSERTTEMPLATE8 (LRP_SHARED_POS_TYPE_POSINSERTTEMPLATE8)
#define LRP_PREPROCESSOR_POS_TYPE_POSINSERTTEMPLATE9 (LRP_SHARED_POS_TYPE_POSINSERTTEMPLATE9)
#define LRP_PREPROCESSOR_POS_TYPE_POSINSERTTEMPLATE0 (LRP_SHARED_POS_TYPE_POSINSERTTEMPLATE0)
#define LRP_PREPROCESSOR_POS_TYPE_ARRAY_NUMBER_OF_TYPES (LRP_SHARED_POS_TYPE_ARRAY_NUMBER_OF_TYPES+0)	//this must change if some additional POS type cases were added for GIA preprocessor
#define LRP_PREPROCESSOR_POS_TYPE_NAME_UNDEFINED (LRP_SHARED_POS_TYPE_NAME_UNDEFINED)
#define LRP_PREPROCESSOR_POS_TYPE_NAME_CONJUNCTION (LRP_SHARED_POS_TYPE_NAME_CONJUNCTION)
#define LRP_PREPROCESSOR_POS_TYPE_NAME_NUMBER (LRP_SHARED_POS_TYPE_NAME_NUMBER)
#define LRP_PREPROCESSOR_POS_TYPE_NAME_DETERMINER (LRP_SHARED_POS_TYPE_NAME_DETERMINER)
#define LRP_PREPROCESSOR_POS_TYPE_NAME_UNKNOWN (LRP_SHARED_POS_TYPE_NAME_UNKNOWN)
#define LRP_PREPROCESSOR_POS_TYPE_NAME_PREDETERMINER (LRP_SHARED_POS_TYPE_NAME_PREDETERMINER)
#define LRP_PREPROCESSOR_POS_TYPE_NAME_POSSESSIVEENDING (LRP_SHARED_POS_TYPE_NAME_POSSESSIVEENDING)
#define LRP_PREPROCESSOR_POS_TYPE_NAME_MODALAUXILIARY (LRP_SHARED_POS_TYPE_NAME_MODALAUXILIARY)
#define LRP_PREPROCESSOR_POS_TYPE_NAME_PREPOSITION (LRP_SHARED_POS_TYPE_NAME_PREPOSITION)
#define LRP_PREPROCESSOR_POS_TYPE_NAME_ADJECTIVE (LRP_SHARED_POS_TYPE_NAME_ADJECTIVE)
#define LRP_PREPROCESSOR_POS_TYPE_NAME_NOUN (LRP_SHARED_POS_TYPE_NAME_NOUN)
#define LRP_PREPROCESSOR_POS_TYPE_NAME_ADVERB (LRP_SHARED_POS_TYPE_NAME_ADVERB)
#define LRP_PREPROCESSOR_POS_TYPE_NAME_PRONOUN_PERSONAL (LRP_SHARED_POS_TYPE_NAME_PRONOUN_PERSONAL)
#define LRP_PREPROCESSOR_POS_TYPE_NAME_PRONOUN_POSSESSIVE (LRP_SHARED_POS_TYPE_NAME_PRONOUN_POSSESSIVE)
#define LRP_PREPROCESSOR_POS_TYPE_NAME_PARTICLE (LRP_SHARED_POS_TYPE_NAME_PARTICLE)
#define LRP_PREPROCESSOR_POS_TYPE_NAME_INTERJECTION (LRP_SHARED_POS_TYPE_NAME_INTERJECTION)
#define LRP_PREPROCESSOR_POS_TYPE_NAME_VERB (LRP_SHARED_POS_TYPE_NAME_VERB)
#define LRP_PREPROCESSOR_POS_TYPE_NAME_WH (LRP_SHARED_POS_TYPE_NAME_WH)
#define LRP_PREPROCESSOR_POS_TYPE_NAME_PUNCTUATION_QUOTE (LRP_SHARED_POS_TYPE_NAME_PUNCTUATION_QUOTE)
#define LRP_PREPROCESSOR_POS_TYPE_NAME_PUNCTUATION_DIVISION (LRP_SHARED_POS_TYPE_NAME_PUNCTUATION_DIVISION)
#define LRP_PREPROCESSOR_POS_TYPE_NAME_PUNCTUATION_END_OF_SENTENCE (LRP_SHARED_POS_TYPE_NAME_PUNCTUATION_END_OF_SENTENCE)
#define LRP_PREPROCESSOR_POS_TYPE_NAME_AUXILIARY_BEING (LRP_SHARED_POS_TYPE_NAME_AUXILIARY_BEING)
#define LRP_PREPROCESSOR_POS_TYPE_NAME_AUXILIARY_HAVING (LRP_SHARED_POS_TYPE_NAME_AUXILIARY_HAVING)
#define LRP_PREPROCESSOR_POS_TYPE_NAME_AUXILIARY_DOING (LRP_SHARED_POS_TYPE_NAME_AUXILIARY_DOING)
#define LRP_PREPROCESSOR_POS_TYPE_NAME_AUXILIARY (LRP_SHARED_POS_TYPE_NAME_AUXILIARY)
#define LRP_PREPROCESSOR_POS_TYPE_NAME_PRONOUN_DEMONSTRATIVE (LRP_SHARED_POS_TYPE_NAME_PRONOUN_DEMONSTRATIVE)
#define LRP_PREPROCESSOR_POS_TYPE_NAME_PRONOUN_INDEFINITE (LRP_SHARED_POS_TYPE_NAME_PRONOUN_INDEFINITE)
#define LRP_PREPROCESSOR_POS_TYPE_NAME_PRONOUN_INTERROGATIVE (LRP_SHARED_POS_TYPE_NAME_PRONOUN_INTERROGATIVE)
#define LRP_PREPROCESSOR_POS_TYPE_NAME_PRONOUN_PERSONAL_OBJECT (LRP_SHARED_POS_TYPE_NAME_PRONOUN_PERSONAL_OBJECT)
#define LRP_PREPROCESSOR_POS_TYPE_NAME_PRONOUN_PERSONAL_SUBJECT (LRP_SHARED_POS_TYPE_NAME_PRONOUN_PERSONAL_SUBJECT)
#define LRP_PREPROCESSOR_POS_TYPE_NAME_PRONOUN_POSSESSIVE_ADJECTIVE (LRP_SHARED_POS_TYPE_NAME_PRONOUN_POSSESSIVE_ADJECTIVE)
#define LRP_PREPROCESSOR_POS_TYPE_NAME_PRONOUN_POSSESSIVE_ALONE (LRP_SHARED_POS_TYPE_NAME_PRONOUN_POSSESSIVE_ALONE)
#define LRP_PREPROCESSOR_POS_TYPE_NAME_PRONOUN_REFLEXIVE (LRP_SHARED_POS_TYPE_NAME_PRONOUN_REFLEXIVE)
#define LRP_PREPROCESSOR_POS_TYPE_NAME_PRONOUN_RELATIVE (LRP_SHARED_POS_TYPE_NAME_PRONOUN_RELATIVE)
#define LRP_PREPROCESSOR_POS_TYPE_NAME_CONJUNCTION_COORDINATING (LRP_SHARED_POS_TYPE_NAME_CONJUNCTION_COORDINATING)
#define LRP_PREPROCESSOR_POS_TYPE_NAME_CONJUNCTION_SUBCOORDINATING (LRP_SHARED_POS_TYPE_NAME_CONJUNCTION_SUBCOORDINATING)
#define LRP_PREPROCESSOR_POS_TYPE_NAME_CONJUNCTION_CORRELATIVE_FIRST (LRP_SHARED_POS_TYPE_NAME_CONJUNCTION_CORRELATIVE_FIRST)
#define LRP_PREPROCESSOR_POS_TYPE_NAME_CONJUNCTION_CORRELATIVE_SECOND (LRP_SHARED_POS_TYPE_NAME_CONJUNCTION_CORRELATIVE_SECOND)
#define LRP_PREPROCESSOR_POS_TYPE_NAME_DATE (LRP_SHARED_POS_TYPE_NAME_DATE)
#define LRP_PREPROCESSOR_POS_TYPE_NAME_UNIT (LRP_SHARED_POS_TYPE_NAME_UNIT)
#define LRP_PREPROCESSOR_POS_TYPE_NAME_MONEY (LRP_SHARED_POS_TYPE_NAME_MONEY)
#define LRP_PREPROCESSOR_POS_TYPE_NAME_TITLE (LRP_SHARED_POS_TYPE_NAME_TITLE)
#define LRP_PREPROCESSOR_POS_TYPE_NAME_PROPERNOUN_FIRST_MALE (LRP_SHARED_POS_TYPE_NAME_PROPERNOUN_FIRST_MALE)
#define LRP_PREPROCESSOR_POS_TYPE_NAME_PROPERNOUN_FIRST_FEMALE (LRP_SHARED_POS_TYPE_NAME_PROPERNOUN_FIRST_FEMALE)
#define LRP_PREPROCESSOR_POS_TYPE_NAME_PROPERNOUN_FAMILY (LRP_SHARED_POS_TYPE_NAME_PROPERNOUN_FAMILY)
#define LRP_PREPROCESSOR_POS_TYPE_NAME_PROPERNOUN_PLACE (LRP_SHARED_POS_TYPE_NAME_PROPERNOUN_PLACE)
#define LRP_PREPROCESSOR_POS_TYPE_NAME_POSINSERTTEMPLATE5 (LRP_SHARED_POS_TYPE_NAME_POSINSERTTEMPLATE5)
#define LRP_PREPROCESSOR_POS_TYPE_NAME_POSINSERTTEMPLATE6 (LRP_SHARED_POS_TYPE_NAME_POSINSERTTEMPLATE6)
#define LRP_PREPROCESSOR_POS_TYPE_NAME_POSINSERTTEMPLATE7 (LRP_SHARED_POS_TYPE_NAME_POSINSERTTEMPLATE7)
#define LRP_PREPROCESSOR_POS_TYPE_NAME_POSINSERTTEMPLATE8 (LRP_SHARED_POS_TYPE_NAME_POSINSERTTEMPLATE8)
#define LRP_PREPROCESSOR_POS_TYPE_NAME_POSINSERTTEMPLATE9 (LRP_SHARED_POS_TYPE_NAME_POSINSERTTEMPLATE9)
#define LRP_PREPROCESSOR_POS_TYPE_NAME_POSINSERTTEMPLATE0 (LRP_SHARED_POS_TYPE_NAME_POSINSERTTEMPLATE0)

#ifdef SANI_ADD_EXPLICIT_WORD_REFERENCES_AS_INDEPENDENT_POS_PERMUTATIONS
	#define LRP_PREPROCESSOR_POS_TYPE_EXPLICITWORDTEMP (LRP_PREPROCESSOR_POS_TYPE_POSINSERTTEMPLATE5)
	#define LRP_PREPROCESSOR_POS_TYPE_NAME_EXPLICITWORDTEMP (LRP_PREPROCESSOR_POS_TYPE_NAME_POSINSERTTEMPLATE5)
#endif

#define LRP_PREPROCESSOR_POS_TYPE_PROPERNOUN_DEFAULT (LRP_PREPROCESSOR_POS_TYPE_PROPERNOUN_PLACE)

static string LRPpreprocessorPOStypeNameArray[LRP_PREPROCESSOR_POS_TYPE_ARRAY_NUMBER_OF_TYPES] = {LRP_PREPROCESSOR_POS_TYPE_NAME_UNDEFINED, LRP_PREPROCESSOR_POS_TYPE_NAME_CONJUNCTION, LRP_PREPROCESSOR_POS_TYPE_NAME_NUMBER, LRP_PREPROCESSOR_POS_TYPE_NAME_DETERMINER, LRP_PREPROCESSOR_POS_TYPE_NAME_UNKNOWN, LRP_PREPROCESSOR_POS_TYPE_NAME_PREDETERMINER, LRP_PREPROCESSOR_POS_TYPE_NAME_POSSESSIVEENDING, LRP_PREPROCESSOR_POS_TYPE_NAME_MODALAUXILIARY, LRP_PREPROCESSOR_POS_TYPE_NAME_PREPOSITION, LRP_PREPROCESSOR_POS_TYPE_NAME_ADJECTIVE, LRP_PREPROCESSOR_POS_TYPE_NAME_NOUN, LRP_PREPROCESSOR_POS_TYPE_NAME_ADVERB, LRP_PREPROCESSOR_POS_TYPE_NAME_PRONOUN_PERSONAL, LRP_PREPROCESSOR_POS_TYPE_NAME_PRONOUN_POSSESSIVE, LRP_PREPROCESSOR_POS_TYPE_NAME_PARTICLE, LRP_PREPROCESSOR_POS_TYPE_NAME_INTERJECTION, LRP_PREPROCESSOR_POS_TYPE_NAME_VERB, LRP_PREPROCESSOR_POS_TYPE_NAME_WH, LRP_PREPROCESSOR_POS_TYPE_NAME_PUNCTUATION_QUOTE, LRP_PREPROCESSOR_POS_TYPE_NAME_PUNCTUATION_DIVISION, LRP_PREPROCESSOR_POS_TYPE_NAME_PUNCTUATION_END_OF_SENTENCE, LRP_PREPROCESSOR_POS_TYPE_NAME_AUXILIARY_BEING, LRP_PREPROCESSOR_POS_TYPE_NAME_AUXILIARY_HAVING, LRP_PREPROCESSOR_POS_TYPE_NAME_AUXILIARY_DOING, LRP_PREPROCESSOR_POS_TYPE_NAME_AUXILIARY, LRP_PREPROCESSOR_POS_TYPE_NAME_PRONOUN_DEMONSTRATIVE, LRP_PREPROCESSOR_POS_TYPE_NAME_PRONOUN_INDEFINITE, LRP_PREPROCESSOR_POS_TYPE_NAME_PRONOUN_INTERROGATIVE, LRP_PREPROCESSOR_POS_TYPE_NAME_PRONOUN_PERSONAL_OBJECT, LRP_PREPROCESSOR_POS_TYPE_NAME_PRONOUN_PERSONAL_SUBJECT, LRP_PREPROCESSOR_POS_TYPE_NAME_PRONOUN_POSSESSIVE_ADJECTIVE, LRP_PREPROCESSOR_POS_TYPE_NAME_PRONOUN_POSSESSIVE_ALONE, LRP_PREPROCESSOR_POS_TYPE_NAME_PRONOUN_REFLEXIVE, LRP_PREPROCESSOR_POS_TYPE_NAME_PRONOUN_RELATIVE, LRP_PREPROCESSOR_POS_TYPE_NAME_CONJUNCTION_COORDINATING, LRP_PREPROCESSOR_POS_TYPE_NAME_CONJUNCTION_SUBCOORDINATING, LRP_PREPROCESSOR_POS_TYPE_NAME_CONJUNCTION_CORRELATIVE_FIRST, LRP_PREPROCESSOR_POS_TYPE_NAME_CONJUNCTION_CORRELATIVE_SECOND, LRP_PREPROCESSOR_POS_TYPE_NAME_DATE, LRP_PREPROCESSOR_POS_TYPE_NAME_UNIT, LRP_PREPROCESSOR_POS_TYPE_NAME_MONEY, LRP_PREPROCESSOR_POS_TYPE_NAME_TITLE, LRP_PREPROCESSOR_POS_TYPE_NAME_PROPERNOUN_FIRST_MALE, LRP_PREPROCESSOR_POS_TYPE_NAME_PROPERNOUN_FIRST_FEMALE, LRP_PREPROCESSOR_POS_TYPE_NAME_PROPERNOUN_FAMILY, LRP_PREPROCESSOR_POS_TYPE_NAME_PROPERNOUN_PLACE, LRP_PREPROCESSOR_POS_TYPE_NAME_POSINSERTTEMPLATE5, LRP_PREPROCESSOR_POS_TYPE_NAME_POSINSERTTEMPLATE6, LRP_PREPROCESSOR_POS_TYPE_NAME_POSINSERTTEMPLATE7, LRP_PREPROCESSOR_POS_TYPE_NAME_POSINSERTTEMPLATE8, LRP_PREPROCESSOR_POS_TYPE_NAME_POSINSERTTEMPLATE9, LRP_PREPROCESSOR_POS_TYPE_NAME_POSINSERTTEMPLATE0};

#define LRP_PREPROCESSOR_POS_TYPE_RCMOD (LRP_PREPROCESSOR_POS_TYPE_PRONOUN_RELATIVE)	//includes that/which
#define LRP_PREPROCESSOR_POS_TYPE_NAME_PREPOSITION (LRP_SHARED_POS_TYPE_NAME_PREPOSITION)
#define LRP_PREPROCESSOR_POS_TYPE_NAME_NOUN (LRP_SHARED_POS_TYPE_NAME_NOUN)
#define LRP_PREPROCESSOR_POS_TYPE_NAME_VERB (LRP_SHARED_POS_TYPE_NAME_VERB)

#define LRP_PREPROCESSOR_POS_TYPE_MULTIWORD_REPLACEMENT_UNDEFINED ""
#define LRP_PREPROCESSOR_POS_TYPE_MULTIWORD_REPLACEMENT_CONJUNCTION "and"
#define LRP_PREPROCESSOR_POS_TYPE_MULTIWORD_REPLACEMENT_NUMBER "ten"
#define LRP_PREPROCESSOR_POS_TYPE_MULTIWORD_REPLACEMENT_DETERMINER "the"
#define LRP_PREPROCESSOR_POS_TYPE_MULTIWORD_REPLACEMENT_UNKNOWN ""
#define LRP_PREPROCESSOR_POS_TYPE_MULTIWORD_REPLACEMENT_PREDETERMINER ""	//not used
#define LRP_PREPROCESSOR_POS_TYPE_MULTIWORD_REPLACEMENT_POSSESSIVEENDING ""
#define LRP_PREPROCESSOR_POS_TYPE_MULTIWORD_REPLACEMENT_MODALAUXILIARY "would"
#define LRP_PREPROCESSOR_POS_TYPE_MULTIWORD_REPLACEMENT_PREPOSITION "during"
#define LRP_PREPROCESSOR_POS_TYPE_MULTIWORD_REPLACEMENT_ADJECTIVE "frozen"
#define LRP_PREPROCESSOR_POS_TYPE_MULTIWORD_REPLACEMENT_NOUN "giraffe"
#define LRP_PREPROCESSOR_POS_TYPE_MULTIWORD_REPLACEMENT_ADVERB "bitterly"
#define LRP_PREPROCESSOR_POS_TYPE_MULTIWORD_REPLACEMENT_PRONOUN_PERSONAL "we"
#define LRP_PREPROCESSOR_POS_TYPE_MULTIWORD_REPLACEMENT_PRONOUN_POSSESSIVE ""
#define LRP_PREPROCESSOR_POS_TYPE_MULTIWORD_REPLACEMENT_PARTICLE ""
#define LRP_PREPROCESSOR_POS_TYPE_MULTIWORD_REPLACEMENT_INTERJECTION "hallelujah"
#define LRP_PREPROCESSOR_POS_TYPE_MULTIWORD_REPLACEMENT_VERB "fight"
#define LRP_PREPROCESSOR_POS_TYPE_MULTIWORD_REPLACEMENT_WH ""
#define LRP_PREPROCESSOR_POS_TYPE_MULTIWORD_REPLACEMENT_PUNCTUATION_QUOTE ""
#define LRP_PREPROCESSOR_POS_TYPE_MULTIWORD_REPLACEMENT_PUNCTUATION_DIVISION ""
#define LRP_PREPROCESSOR_POS_TYPE_MULTIWORD_REPLACEMENT_PUNCTUATION_END_OF_SENTENCE ""
#define LRP_PREPROCESSOR_POS_TYPE_MULTIWORD_REPLACEMENT_AUXILIARY_BEING ""
#define LRP_PREPROCESSOR_POS_TYPE_MULTIWORD_REPLACEMENT_AUXILIARY_HAVING ""
#define LRP_PREPROCESSOR_POS_TYPE_MULTIWORD_REPLACEMENT_AUXILIARY_DOING ""
#define LRP_PREPROCESSOR_POS_TYPE_MULTIWORD_REPLACEMENT_AUXILIARY ""
#define LRP_PREPROCESSOR_POS_TYPE_MULTIWORD_REPLACEMENT_PRONOUN_DEMONSTRATIVE ""
#define LRP_PREPROCESSOR_POS_TYPE_MULTIWORD_REPLACEMENT_PRONOUN_INDEFINITE ""
#define LRP_PREPROCESSOR_POS_TYPE_MULTIWORD_REPLACEMENT_PRONOUN_INTERROGATIVE ""
#define LRP_PREPROCESSOR_POS_TYPE_MULTIWORD_REPLACEMENT_PRONOUN_PERSONAL_OBJECT ""
#define LRP_PREPROCESSOR_POS_TYPE_MULTIWORD_REPLACEMENT_PRONOUN_PERSONAL_SUBJECT ""
#define LRP_PREPROCESSOR_POS_TYPE_MULTIWORD_REPLACEMENT_PRONOUN_POSSESSIVE_ADJECTIVE ""
#define LRP_PREPROCESSOR_POS_TYPE_MULTIWORD_REPLACEMENT_PRONOUN_POSSESSIVE_ALONE ""
#define LRP_PREPROCESSOR_POS_TYPE_MULTIWORD_REPLACEMENT_PRONOUN_REFLEXIVE ""
#define LRP_PREPROCESSOR_POS_TYPE_MULTIWORD_REPLACEMENT_PRONOUN_RELATIVE ""
#define LRP_PREPROCESSOR_POS_TYPE_MULTIWORD_REPLACEMENT_CONJUNCTION_COORDINATING ""
#define LRP_PREPROCESSOR_POS_TYPE_MULTIWORD_REPLACEMENT_CONJUNCTION_SUBCOORDINATING ""
#define LRP_PREPROCESSOR_POS_TYPE_MULTIWORD_REPLACEMENT_CONJUNCTION_CORRELATIVE_FIRST ""
#define LRP_PREPROCESSOR_POS_TYPE_MULTIWORD_REPLACEMENT_CONJUNCTION_CORRELATIVE_SECOND ""
#define LRP_PREPROCESSOR_POS_TYPE_MULTIWORD_REPLACEMENT_DATE ""
#define LRP_PREPROCESSOR_POS_TYPE_MULTIWORD_REPLACEMENT_UNIT "metres"
#define LRP_PREPROCESSOR_POS_TYPE_MULTIWORD_REPLACEMENT_MONEY ""
#define LRP_PREPROCESSOR_POS_TYPE_MULTIWORD_REPLACEMENT_TITLE ""
#define LRP_PREPROCESSOR_POS_TYPE_MULTIWORD_REPLACEMENT_PROPERNOUN_FIRST_MALE ""
#define LRP_PREPROCESSOR_POS_TYPE_MULTIWORD_REPLACEMENT_PROPERNOUN_FIRST_FEMALE ""
#define LRP_PREPROCESSOR_POS_TYPE_MULTIWORD_REPLACEMENT_PROPERNOUN_FAMILY "Smith"
#define LRP_PREPROCESSOR_POS_TYPE_MULTIWORD_REPLACEMENT_PROPERNOUN_PLACE ""
#define LRP_PREPROCESSOR_POS_TYPE_MULTIWORD_REPLACEMENT_POSINSERTTEMPLATE5 ""
#define LRP_PREPROCESSOR_POS_TYPE_MULTIWORD_REPLACEMENT_POSINSERTTEMPLATE6 ""
#define LRP_PREPROCESSOR_POS_TYPE_MULTIWORD_REPLACEMENT_POSINSERTTEMPLATE7 ""
#define LRP_PREPROCESSOR_POS_TYPE_MULTIWORD_REPLACEMENT_POSINSERTTEMPLATE8 ""
#define LRP_PREPROCESSOR_POS_TYPE_MULTIWORD_REPLACEMENT_POSINSERTTEMPLATE9 ""
#define LRP_PREPROCESSOR_POS_TYPE_MULTIWORD_REPLACEMENT_POSINSERTTEMPLATE0 ""


static string LRPpreprocessorPOStypeMultiwordReplacementArray[LRP_PREPROCESSOR_POS_TYPE_ARRAY_NUMBER_OF_TYPES] = {LRP_PREPROCESSOR_POS_TYPE_MULTIWORD_REPLACEMENT_UNDEFINED, LRP_PREPROCESSOR_POS_TYPE_MULTIWORD_REPLACEMENT_CONJUNCTION, LRP_PREPROCESSOR_POS_TYPE_MULTIWORD_REPLACEMENT_NUMBER, LRP_PREPROCESSOR_POS_TYPE_MULTIWORD_REPLACEMENT_DETERMINER, LRP_PREPROCESSOR_POS_TYPE_MULTIWORD_REPLACEMENT_UNKNOWN, LRP_PREPROCESSOR_POS_TYPE_MULTIWORD_REPLACEMENT_PREDETERMINER, LRP_PREPROCESSOR_POS_TYPE_MULTIWORD_REPLACEMENT_POSSESSIVEENDING, LRP_PREPROCESSOR_POS_TYPE_MULTIWORD_REPLACEMENT_MODALAUXILIARY, LRP_PREPROCESSOR_POS_TYPE_MULTIWORD_REPLACEMENT_PREPOSITION, LRP_PREPROCESSOR_POS_TYPE_MULTIWORD_REPLACEMENT_ADJECTIVE, LRP_PREPROCESSOR_POS_TYPE_MULTIWORD_REPLACEMENT_NOUN, LRP_PREPROCESSOR_POS_TYPE_MULTIWORD_REPLACEMENT_ADVERB, LRP_PREPROCESSOR_POS_TYPE_MULTIWORD_REPLACEMENT_PRONOUN_PERSONAL, LRP_PREPROCESSOR_POS_TYPE_MULTIWORD_REPLACEMENT_PRONOUN_POSSESSIVE, LRP_PREPROCESSOR_POS_TYPE_MULTIWORD_REPLACEMENT_PARTICLE, LRP_PREPROCESSOR_POS_TYPE_MULTIWORD_REPLACEMENT_INTERJECTION, LRP_PREPROCESSOR_POS_TYPE_MULTIWORD_REPLACEMENT_VERB, LRP_PREPROCESSOR_POS_TYPE_MULTIWORD_REPLACEMENT_WH, LRP_PREPROCESSOR_POS_TYPE_MULTIWORD_REPLACEMENT_PUNCTUATION_QUOTE, LRP_PREPROCESSOR_POS_TYPE_MULTIWORD_REPLACEMENT_PUNCTUATION_DIVISION, LRP_PREPROCESSOR_POS_TYPE_MULTIWORD_REPLACEMENT_PUNCTUATION_END_OF_SENTENCE, LRP_PREPROCESSOR_POS_TYPE_MULTIWORD_REPLACEMENT_AUXILIARY_BEING, LRP_PREPROCESSOR_POS_TYPE_MULTIWORD_REPLACEMENT_AUXILIARY_HAVING, LRP_PREPROCESSOR_POS_TYPE_MULTIWORD_REPLACEMENT_AUXILIARY_DOING, LRP_PREPROCESSOR_POS_TYPE_MULTIWORD_REPLACEMENT_AUXILIARY, LRP_PREPROCESSOR_POS_TYPE_MULTIWORD_REPLACEMENT_PRONOUN_DEMONSTRATIVE, LRP_PREPROCESSOR_POS_TYPE_MULTIWORD_REPLACEMENT_PRONOUN_INDEFINITE, LRP_PREPROCESSOR_POS_TYPE_MULTIWORD_REPLACEMENT_PRONOUN_INTERROGATIVE, LRP_PREPROCESSOR_POS_TYPE_MULTIWORD_REPLACEMENT_PRONOUN_PERSONAL_OBJECT, LRP_PREPROCESSOR_POS_TYPE_MULTIWORD_REPLACEMENT_PRONOUN_PERSONAL_SUBJECT, LRP_PREPROCESSOR_POS_TYPE_MULTIWORD_REPLACEMENT_PRONOUN_POSSESSIVE_ADJECTIVE, LRP_PREPROCESSOR_POS_TYPE_MULTIWORD_REPLACEMENT_PRONOUN_POSSESSIVE_ALONE, LRP_PREPROCESSOR_POS_TYPE_MULTIWORD_REPLACEMENT_PRONOUN_REFLEXIVE, LRP_PREPROCESSOR_POS_TYPE_MULTIWORD_REPLACEMENT_PRONOUN_RELATIVE, LRP_PREPROCESSOR_POS_TYPE_MULTIWORD_REPLACEMENT_CONJUNCTION_COORDINATING, LRP_PREPROCESSOR_POS_TYPE_MULTIWORD_REPLACEMENT_CONJUNCTION_SUBCOORDINATING, LRP_PREPROCESSOR_POS_TYPE_MULTIWORD_REPLACEMENT_CONJUNCTION_CORRELATIVE_FIRST, LRP_PREPROCESSOR_POS_TYPE_MULTIWORD_REPLACEMENT_CONJUNCTION_CORRELATIVE_SECOND, LRP_PREPROCESSOR_POS_TYPE_MULTIWORD_REPLACEMENT_DATE, LRP_PREPROCESSOR_POS_TYPE_MULTIWORD_REPLACEMENT_UNIT, LRP_PREPROCESSOR_POS_TYPE_MULTIWORD_REPLACEMENT_MONEY, LRP_PREPROCESSOR_POS_TYPE_MULTIWORD_REPLACEMENT_TITLE, LRP_PREPROCESSOR_POS_TYPE_MULTIWORD_REPLACEMENT_PROPERNOUN_FIRST_MALE, LRP_PREPROCESSOR_POS_TYPE_MULTIWORD_REPLACEMENT_PROPERNOUN_FIRST_FEMALE, LRP_PREPROCESSOR_POS_TYPE_MULTIWORD_REPLACEMENT_PROPERNOUN_FAMILY, LRP_PREPROCESSOR_POS_TYPE_MULTIWORD_REPLACEMENT_PROPERNOUN_PLACE, LRP_PREPROCESSOR_POS_TYPE_MULTIWORD_REPLACEMENT_POSINSERTTEMPLATE5, LRP_PREPROCESSOR_POS_TYPE_MULTIWORD_REPLACEMENT_POSINSERTTEMPLATE6, LRP_PREPROCESSOR_POS_TYPE_MULTIWORD_REPLACEMENT_POSINSERTTEMPLATE7, LRP_PREPROCESSOR_POS_TYPE_MULTIWORD_REPLACEMENT_POSINSERTTEMPLATE8, LRP_PREPROCESSOR_POS_TYPE_MULTIWORD_REPLACEMENT_POSINSERTTEMPLATE9, LRP_PREPROCESSOR_POS_TYPE_MULTIWORD_REPLACEMENT_POSINSERTTEMPLATE0};

//this is not entirely accurate (some LRP_PREPROCESSOR_POS_TYPEs have no direct FEATURE_POS_TAG/PENN treebank equivalent):
#ifdef LRP_PREPROCESSOR_POS_TYPE_CROSS_REFERENCE_STANFORD_POS_ARRAY_LIMITED
static string LRPpreprocessorPOStypeCrossReferenceStanfordPos[LRP_PREPROCESSOR_POS_TYPE_ARRAY_NUMBER_OF_TYPES] = {FEATURE_POS_TAG_UNKNOWN_SYMBOL_SYM, FEATURE_POS_TAG_COORDINATING_CONJUNCTION_CC, FEATURE_POS_TAG_CARDINALNUMBER_CD, FEATURE_POS_TAG_DETERMINER, FEATURE_POS_TAG_UNKNOWN_SYMBOL_SYM, FEATURE_POS_TAG_UNKNOWN_PREDETERMINER_PDT, FEATURE_POS_TAG_UNKNOWN_POSSESSIVEENDING_POS, FEATURE_POS_TAG_MODALAUXILIARY_MD, FEATURE_POS_TAG_PREPOSITION_IN, FEATURE_POS_TAG_ADJECTIVE_JJ, FEATURE_POS_TAG_NOUN_NN, FEATURE_POS_TAG_ADVERB_RB, FEATURE_POS_TAG_PRONOUN_PERSONAL_PRONOUN_PRP, FEATURE_POS_TAG_PRONOUN_POSSESSIVE_PRONOUN_PPDOLLAR, FEATURE_POS_TAG_PARTICLE_RP, FEATURE_POS_TAG_INTERJECTION_UH, FEATURE_POS_TAG_VERB_VB, FEATURE_POS_TAG_WH_DETERMINER_WDT, FEATURE_POS_TAG_PUNCTUATION_QUOTE_LEFTBRACKET, FEATURE_POS_TAG_PUNCTUATION_DIVISION_COMMA, FEATURE_POS_TAG_PUNCTUATION_QUOTE_FULLSTOP, FEATURE_POS_TAG_AUXILIARY_AUX, FEATURE_POS_TAG_AUXILIARY_AUX, FEATURE_POS_TAG_AUXILIARY_AUX, FEATURE_POS_TAG_AUXILIARY_AUX, FEATURE_POS_TAG_PRONOUN_PRON, FEATURE_POS_TAG_PRONOUN_PRON, FEATURE_POS_TAG_PRONOUN_PRON, FEATURE_POS_TAG_PRONOUN_PERSONAL_PRONOUN_PRP, FEATURE_POS_TAG_PRONOUN_PERSONAL_PRONOUN_PRP, FEATURE_POS_TAG_PRONOUN_POSSESSIVE_PRONOUN_PPDOLLAR, FEATURE_POS_TAG_PRONOUN_POSSESSIVE_PRONOUN_PPDOLLAR, FEATURE_POS_TAG_PRONOUN_PRON, FEATURE_POS_TAG_PRONOUN_PRON, FEATURE_POS_TAG_COORDINATING_CONJUNCTION_CC, FEATURE_POS_TAG_SUBCOORDINATING_CONJUNCTION_SCONJ, FEATURE_POS_TAG_UNKNOWN_SYMBOL_SYM, FEATURE_POS_TAG_UNKNOWN_SYMBOL_SYM, FEATURE_POS_TAG_UNKNOWN_SYMBOL_SYM, "", "", "", "", "", "", "", "", "", "", "", "", ""};
#else
static string LRPpreprocessorPOStypeCrossReferenceStanfordPos[LRP_PREPROCESSOR_POS_TYPE_ARRAY_NUMBER_OF_TYPES] = {FEATURE_POS_TAG_UNKNOWN_SYMBOL_SYM, FEATURE_POS_TAG_COORDINATING_CONJUNCTION_CC, FEATURE_POS_TAG_CARDINALNUMBER_CD, FEATURE_POS_TAG_DETERMINER, FEATURE_POS_TAG_UNKNOWN_SYMBOL_SYM, FEATURE_POS_TAG_UNKNOWN_PREDETERMINER_PDT, FEATURE_POS_TAG_UNKNOWN_POSSESSIVEENDING_POS, FEATURE_POS_TAG_MODALAUXILIARY_MD, FEATURE_POS_TAG_PREPOSITION_IN, FEATURE_POS_TAG_ADJECTIVE_JJ, FEATURE_POS_TAG_NOUN_NN, FEATURE_POS_TAG_ADVERB_RB, FEATURE_POS_TAG_PRONOUN_PERSONAL_PRONOUN_PRP, FEATURE_POS_TAG_PRONOUN_POSSESSIVE_PRONOUN_PPDOLLAR, FEATURE_POS_TAG_PARTICLE_RP, FEATURE_POS_TAG_INTERJECTION_UH, FEATURE_POS_TAG_VERB_VB, FEATURE_POS_TAG_WH_DETERMINER_WDT, FEATURE_POS_TAG_PUNCTUATION_QUOTE_LEFTBRACKET, FEATURE_POS_TAG_PUNCTUATION_DIVISION_COMMA, FEATURE_POS_TAG_PUNCTUATION_QUOTE_FULLSTOP, FEATURE_POS_TAG_AUXILIARY_AUX, FEATURE_POS_TAG_AUXILIARY_AUX, FEATURE_POS_TAG_AUXILIARY_AUX, FEATURE_POS_TAG_AUXILIARY_AUX, FEATURE_POS_TAG_PRONOUN_PRON, FEATURE_POS_TAG_PRONOUN_PRON, FEATURE_POS_TAG_PRONOUN_PRON, FEATURE_POS_TAG_PRONOUN_PERSONAL_PRONOUN_PRP, FEATURE_POS_TAG_PRONOUN_PERSONAL_PRONOUN_PRP, FEATURE_POS_TAG_PRONOUN_POSSESSIVE_PRONOUN_PPDOLLAR, FEATURE_POS_TAG_PRONOUN_POSSESSIVE_PRONOUN_PPDOLLAR, FEATURE_POS_TAG_PRONOUN_PRON, FEATURE_POS_TAG_PRONOUN_PRON, FEATURE_POS_TAG_COORDINATING_CONJUNCTION_CC, FEATURE_POS_TAG_SUBCOORDINATING_CONJUNCTION_SCONJ, FEATURE_POS_TAG_UNKNOWN_SYMBOL_SYM, FEATURE_POS_TAG_UNKNOWN_SYMBOL_SYM, FEATURE_POS_TAG_UNKNOWN_SYMBOL_SYM, FEATURE_POS_TAG_UNKNOWN_SYMBOL_SYM, FEATURE_POS_TAG_UNKNOWN_SYMBOL_SYM, FEATURE_POS_TAG_UNKNOWN_SYMBOL_SYM, FEATURE_POS_TAG_UNKNOWN_SYMBOL_SYM, FEATURE_POS_TAG_UNKNOWN_SYMBOL_SYM, FEATURE_POS_TAG_UNKNOWN_SYMBOL_SYM, FEATURE_POS_TAG_UNKNOWN_SYMBOL_SYM, FEATURE_POS_TAG_UNKNOWN_SYMBOL_SYM, FEATURE_POS_TAG_UNKNOWN_SYMBOL_SYM, FEATURE_POS_TAG_UNKNOWN_SYMBOL_SYM, FEATURE_POS_TAG_UNKNOWN_SYMBOL_SYM, FEATURE_POS_TAG_UNKNOWN_SYMBOL_SYM, FEATURE_POS_TAG_UNKNOWN_SYMBOL_SYM};
#endif

#ifdef LRP_PREPROCESSOR_WORD_NLP_PARSABLE_PHRASE_SUPPORT_INTRAWORD_PUNCTUATION_MARK
#define LRP_PREPROCESSOR_WORD_NLP_PARSABLE_PHRASE_CHARACTERS_NUMBER_OF_TYPES (65)	//must sync with NLC_PREPROCESSOR_MATH_NLP_PARSABLE_PHRASE_CHARACTERS_NUMBER_OF_TYPES
static char LRPpreprocessorMultiwordReductionNLPparsableCharacters[LRP_PREPROCESSOR_WORD_NLP_PARSABLE_PHRASE_CHARACTERS_NUMBER_OF_TYPES] = {'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '_', '.','\''};	//must sync with preprocessorMathNLPparsableCharacters
#endif

//#define LRP_PREPROCESSOR_WORD_USE_OLD_PREPOSITION_SPECIFIC_CODE_NOT_REQUIRED

#define LRP_PREPROCESSOR_WORD_PHRASALVERB_DATABASE_FILE_NAME "specialwordlistPhrasalVerbs.txt"
#define LRP_PREPROCESSOR_WORD_IRREGULARVERB_DATABASE_FILE_NAME "specialwordlistIrregularVerbs.txt"
#define LRP_PREPROCESSOR_WORD_IRREGULARNOUN_DATABASE_FILE_NAME "specialwordlistIrregularNouns.txt"
#define LRP_PREPROCESSOR_WORD_WORDLISTS_DATABASE_FILE_NAME "wordlists.txt"
#define LRP_PREPROCESSOR_WORD_MULTIWORDLISTS_DATABASE_FILE_NAME "multiwordlists.txt"



#define LRP_PREPROCESSOR_WORD_PHRASALVERB_DATABASE_TAG_OR "or"
#define LRP_PREPROCESSOR_WORD_PHRASALVERB_DATABASE_TAG_ARBITRARYNAME_SOMETHING_NAME "sth"
#define LRP_PREPROCESSOR_WORD_PHRASALVERB_DATABASE_TAG_ARBITRARYNAME_SOMEWHERE_NAME "swh"
#define LRP_PREPROCESSOR_WORD_PHRASALVERB_DATABASE_TAG_ARBITRARYNAME_SOMEBODY_NAME "sb"
#define LRP_PREPROCESSOR_WORD_PHRASALVERB_DATABASE_TAG_ARBITRARYNAME_SOMETHING (0)
#define LRP_PREPROCESSOR_WORD_PHRASALVERB_DATABASE_TAG_ARBITRARYNAME_SOMEWHERE (1)
#define LRP_PREPROCESSOR_WORD_PHRASALVERB_DATABASE_TAG_ARBITRARYNAME_SOMEBODY (2)
#define LRP_PREPROCESSOR_WORD_PHRASALVERB_DATABASE_TAG_ARBITRARYNAME_UNDEFINED (LRP_PREPROCESSOR_WORD_PHRASALVERB_DATABASE_TAG_ARBITRARYNAME_SOMETHING)
#define LRP_PREPROCESSOR_WORD_PHRASALVERB_DATABASE_TAG_ARBITRARYNAME_MAX_NUMBER_WORDS (3)
#define LRP_PREPROCESSOR_WORD_PHRASALVERB_DATABASE_TAG_ALTERNATE (CHAR_FORWARDSLASH)
#define LRP_PREPROCESSOR_WORD_PHRASALVERB_DATABASE_TAG_OPEN_OPTIONAL (CHAR_OPEN_BRACKET)
#define LRP_PREPROCESSOR_WORD_PHRASALVERB_DATABASE_TAG_CLOSE_OPTIONAL (CHAR_CLOSE_BRACKET)


#define LRP_PREPROCESSOR_WORD_VERB_DATABASE_TAG_BASE_TENSE_FORM_UNKNOWN (0)
#define LRP_PREPROCESSOR_WORD_VERB_DATABASE_TAG_BASE_TENSE_FORM_INFINITIVE (1)
#define LRP_PREPROCESSOR_WORD_VERB_DATABASE_TAG_BASE_TENSE_FORM_PRESENT (2)
#define LRP_PREPROCESSOR_WORD_VERB_DATABASE_TAG_BASE_TENSE_FORM_CONTINUOUS (3)
#define LRP_PREPROCESSOR_WORD_VERB_DATABASE_TAG_BASE_TENSE_FORM_PAST (4)
#define LRP_PREPROCESSOR_WORD_VERB_DATABASE_TAG_BASE_TENSE_FORM_PASTPARTICIPLE (5)
#ifdef LRP_PREPROCESSOR_DETERMINE_VERB_CASE_ADDITIONAL_EXTENDED
#define LRP_PREPROCESSOR_WORD_VERB_DATABASE_TAG_BASE_TENSE_FORM_DESCRIPTION (6)
#define LRP_PREPROCESSOR_WORD_VERB_DATABASE_TAG_BASE_TENSE_FORM_POTENTIAL (7)
#define LRP_PREPROCESSOR_WORD_VERB_DATABASE_TAG_BASE_TENSE_FORM_POTENTIAL_INVERSE (8)
#endif
#define LRP_PREPROCESSOR_WORD_VERB_DATABASE_TAG_BASE_TENSE_FORM_NUMBER_OF_TYPES (9)
#define LRP_PREPROCESSOR_WORD_VERB_DATABASE_TAG_BASE_MAX_NUM_TENSE_FORMS (6)	//unknown, run (infinitive), runs (present), running (continuous), ran (past), run (past partiple) - limited case array for phrasal verb replacement only
static string LRPpreprocessorMultiwordReductionVerbDatabaseTagBaseTenseFormArray[LRP_PREPROCESSOR_WORD_VERB_DATABASE_TAG_BASE_TENSE_FORM_NUMBER_OF_TYPES] = {"unknown", "infinitive", "present", "continuous", "past", "pastParticiple", "description", "potential", "inverse"};
//static int LRPpreprocessorMultiwordReductionVerbDatabaseTagBaseTenseFormArray[LRP_PREPROCESSOR_WORD_VERB_DATABASE_TAG_BASE_TENSE_FORM_NUMBER_OF_TYPES] = {LRP_PREPROCESSOR_WORD_VERB_DATABASE_TAG_BASE_TENSE_FORM_UNKNOWN, LRP_PREPROCESSOR_WORD_VERB_DATABASE_TAG_BASE_TENSE_FORM_INFINITIVE, LRP_PREPROCESSOR_WORD_VERB_DATABASE_TAG_BASE_TENSE_FORM_PRESENT, LRP_PREPROCESSOR_WORD_VERB_DATABASE_TAG_BASE_TENSE_FORM_CONTINUOUS, LRP_PREPROCESSOR_WORD_VERB_DATABASE_TAG_BASE_TENSE_FORM_PAST, LRP_PREPROCESSOR_WORD_VERB_DATABASE_TAG_BASE_TENSE_FORM_PASTPARTICIPLE, LRP_PREPROCESSOR_WORD_VERB_DATABASE_TAG_BASE_TENSE_FORM_DESCRIPTION, LRP_PREPROCESSOR_WORD_VERB_DATABASE_TAG_BASE_TENSE_FORM_POTENTIAL, LRP_PREPROCESSOR_WORD_VERB_DATABASE_TAG_BASE_TENSE_FORM_POTENTIAL_INVERSE};
static bool LRPpreprocessorMultiwordReductionVerbDatabaseTagBaseTenseFormGrammaticallyStrictArray[LRP_PREPROCESSOR_WORD_VERB_DATABASE_TAG_BASE_TENSE_FORM_NUMBER_OF_TYPES] = {true, true, true, true, true, true, false, false, false};

#define LRP_PREPROCESSOR_WORD_NOUN_DATABASE_TAG_BASE_TENSE_FORM_UNKNOWN (0)
#define LRP_PREPROCESSOR_WORD_NOUN_DATABASE_TAG_BASE_TENSE_FORM_SINGULAR (1)
#define LRP_PREPROCESSOR_WORD_NOUN_DATABASE_TAG_BASE_TENSE_FORM_PLURAL (2)
#define LRP_PREPROCESSOR_WORD_NOUN_DATABASE_TAG_BASE_TENSE_FORM_SINGULAR_OR_PLURAL (3)
#define LRP_PREPROCESSOR_WORD_NOUN_DATABASE_TAG_BASE_TENSE_FORM_NUMBER_OF_TYPES (4)
static string LRPpreprocessorMultiwordReductionNounDatabaseTagBaseTenseFormArray[LRP_PREPROCESSOR_WORD_NOUN_DATABASE_TAG_BASE_TENSE_FORM_NUMBER_OF_TYPES] = {"unknown", "singular", "plural", "singularOrPlural"};
//static int LRPpreprocessorMultiwordReductionNounDatabaseTagBaseTenseFormArray[LRP_PREPROCESSOR_WORD_NOUN_DATABASE_TAG_BASE_TENSE_FORM_NUMBER_OF_TYPES] = {LRP_PREPROCESSOR_WORD_NOUN_DATABASE_TAG_BASE_TENSE_FORM_UNKNOWN, LRP_PREPROCESSOR_WORD_NOUN_DATABASE_TAG_BASE_TENSE_FORM_SINGULAR, LRP_PREPROCESSOR_WORD_NOUN_DATABASE_TAG_BASE_TENSE_FORM_PLURAL};


#define LRP_PREPROCESSOR_WORD_IRREGULARVERB_LIST_NUMBER_OF_TYPES (4)
static int LRPpreprocessorMultiwordReductionIrregularVerbColumnCrossReferenceVerbDatabaseBaseTenseForm[LRP_PREPROCESSOR_WORD_IRREGULARVERB_LIST_NUMBER_OF_TYPES] = {LRP_PREPROCESSOR_WORD_VERB_DATABASE_TAG_BASE_TENSE_FORM_INFINITIVE, LRP_PREPROCESSOR_WORD_VERB_DATABASE_TAG_BASE_TENSE_FORM_PAST, LRP_PREPROCESSOR_WORD_VERB_DATABASE_TAG_BASE_TENSE_FORM_PASTPARTICIPLE, LRP_PREPROCESSOR_WORD_VERB_DATABASE_TAG_BASE_TENSE_FORM_CONTINUOUS};

//#define LRP_PREPROCESSOR_WORD_VERB_DATABASE_TAG_BASE_MAX_NUM_TENSE_FORM_VERSIONS (arbitrary)

#define LRP_PREPROCESSOR_WORD_VERB_DATABASE_TAG_BASE_TENSE_FORM_PRESENT_APPEND "s"
#define LRP_PREPROCESSOR_WORD_VERB_DATABASE_TAG_BASE_TENSE_FORM_CONTINUOUS_APPEND "ing"
#define LRP_PREPROCESSOR_WORD_VERB_DATABASE_TAG_BASE_TENSE_FORM_PAST_APPEND "ed"
#define LRP_PREPROCESSOR_WORD_VERB_DATABASE_TAG_BASE_TENSE_FORM_PRESENT_APPEND_CASE3 "ies"
#define LRP_PREPROCESSOR_WORD_VERB_DATABASE_TAG_BASE_TENSE_FORM_PAST_APPEND_CASE3 "ied"
#define LRP_PREPROCESSOR_WORD_VERB_DATABASE_TAG_BASE_TENSE_FORM_PRESENT_APPEND_LENGTH (1)
#define LRP_PREPROCESSOR_WORD_VERB_DATABASE_TAG_BASE_TENSE_FORM_CONTINUOUS_APPEND_LENGTH (3)
#define LRP_PREPROCESSOR_WORD_VERB_DATABASE_TAG_BASE_TENSE_FORM_PAST_APPEND_LENGTH (2)
#ifdef GIA_FEATURE_POS_TAG_VERB_POTENTIAL
#define LRP_PREPROCESSOR_WORD_VERB_DATABASE_TAG_BASE_TENSE_FORM_POTENTIAL_APPEND "able"
#define LRP_PREPROCESSOR_WORD_VERB_DATABASE_TAG_BASE_TENSE_FORM_POTENTIAL_APPEND_CASE3 "iable"
#ifdef GIA_FEATURE_POS_TAG_VERB_POTENTIAL_INVERSE
#define LRP_PREPROCESSOR_WORD_VERB_DATABASE_TAG_BASE_TENSE_FORM_POTENTIAL_INVERSE_APPEND "ive"		//0 characters replaced
#define LRP_PREPROCESSOR_WORD_VERB_DATABASE_TAG_BASE_TENSE_FORM_POTENTIAL_INVERSE_APPEND_CASE1II "itive"	//0 characters replaced
#define LRP_PREPROCESSOR_WORD_VERB_DATABASE_TAG_BASE_TENSE_FORM_POTENTIAL_INVERSE_APPEND_CASE1III "ative"	//0 characters replaced
#define LRP_PREPROCESSOR_WORD_VERB_DATABASE_TAG_BASE_TENSE_FORM_POTENTIAL_INVERSE_APPEND_CASE2 "itive"	//last 1 characters replaced (e)
#define LRP_PREPROCESSOR_WORD_VERB_DATABASE_TAG_BASE_TENSE_FORM_POTENTIAL_INVERSE_APPEND_CASE2II "mentive"	//last 1 characters replaced (e)
#define LRP_PREPROCESSOR_WORD_VERB_DATABASE_TAG_BASE_TENSE_FORM_POTENTIAL_INVERSE_APPEND_CASE3 "imentive"	//last 1 characters replaced (y)
#endif
#endif
#ifdef GIA_FEATURE_POS_TAG_VERB_DESCRIPTION
#define LRP_PREPROCESSOR_WORD_VERB_DATABASE_TAG_BASE_TENSE_FORM_DESCRIPTION_APPEND "ment"		//0 characters replaced
#define LRP_PREPROCESSOR_WORD_VERB_DATABASE_TAG_BASE_TENSE_FORM_DESCRIPTION_APPEND_CASE1II "ament"	//0 characters replaced
#define LRP_PREPROCESSOR_WORD_VERB_DATABASE_TAG_BASE_TENSE_FORM_DESCRIPTION_APPEND_CASE1III "lment"	//0 characters replaced
#define LRP_PREPROCESSOR_WORD_VERB_DATABASE_TAG_BASE_TENSE_FORM_DESCRIPTION_APPEND_CASE2 "ment"	//last 1 characters replaced (e)
#define LRP_PREPROCESSOR_WORD_VERB_DATABASE_TAG_BASE_TENSE_FORM_DESCRIPTION_APPEND_CASE3 "iment"	//last 1 characters replaced (y)
#define LRP_PREPROCESSOR_WORD_VERB_DATABASE_TAG_BASE_TENSE_FORM_DESCRIPTION_APPEND_CASE5 "pment"	//last 2 characters replaced
#define LRP_PREPROCESSOR_WORD_VERB_DATABASE_TAG_BASE_TENSE_FORM_DESCRIPTION2_APPEND "ion"		//0 characters replaced
#define LRP_PREPROCESSOR_WORD_VERB_DATABASE_TAG_BASE_TENSE_FORM_DESCRIPTION2_APPEND_CASE1II "ition"	//0 characters replaced
#define LRP_PREPROCESSOR_WORD_VERB_DATABASE_TAG_BASE_TENSE_FORM_DESCRIPTION2_APPEND_CASE1III "ation"	//0 characters replaced
#define LRP_PREPROCESSOR_WORD_VERB_DATABASE_TAG_BASE_TENSE_FORM_DESCRIPTION2_APPEND_CASE2 "ion"	//last 1 characters replaced (e)
#define LRP_PREPROCESSOR_WORD_VERB_DATABASE_TAG_BASE_TENSE_FORM_DESCRIPTION2_APPEND_CASE2II "ition"	//last 1 characters replaced (e)
#define LRP_PREPROCESSOR_WORD_VERB_DATABASE_TAG_BASE_TENSE_FORM_DESCRIPTION2_APPEND_CASE2III "ation"	//last 1 characters replaced (e)
#define LRP_PREPROCESSOR_WORD_VERB_DATABASE_TAG_BASE_TENSE_FORM_DESCRIPTION2_APPEND_CASE3 "ication"	//last 1 characters replaced (y)
#define LRP_PREPROCESSOR_WORD_VERB_DATABASE_TAG_BASE_TENSE_FORM_DESCRIPTION2_APPEND_CASE6I "amation"	//last 3 characters replaced
#define LRP_PREPROCESSOR_WORD_VERB_DATABASE_TAG_BASE_TENSE_FORM_DESCRIPTION2_APPEND_CASE6II "ision"	//last 3 characters replaced
#define LRP_PREPROCESSOR_WORD_VERB_DATABASE_TAG_BASE_TENSE_FORM_DESCRIPTION2_APPEND_CASE6III "ition"	//last 3 characters replaced
#endif

#define LRP_PREPROCESSOR_WORD_STRUCTURED_DATABASE_TAG_NEXTCOLUMN (CHAR_TAB)
#define LRP_PREPROCESSOR_WORD_STRUCTURED_DATABASE_TAG_ALTERNATE (CHAR_FORWARDSLASH)
#ifdef LRP_PREPROCESSOR_WORD_NORMALISE_INVERSE_PREPOSITIONS
#define LRP_PREPROCESSOR_WORD_INVERSEPREPOSITIONS_DATABASE_FILE_NAME "specialwordlistPrepositionsAndInverse.txt"
#define LRP_PREPROCESSOR_WORD_INVERSEPREPOSITIONS_DATABASE_NUMBER_OF_TAGS (4)
#define LRP_PREPROCESSOR_WORD_INVERSEPREPOSITIONS_DATABASE_TAG_CONDITION (1)
#define LRP_PREPROCESSOR_WORD_INVERSEPREPOSITIONS_DATABASE_TAG_REVERSE_CONDITION (2)
#define LRP_PREPROCESSOR_WORD_INVERSEPREPOSITIONS_DATABASE_TAG_TYPE (3)
#define LRP_PREPROCESSOR_WORD_INVERSEPREPOSITIONS_DATABASE_TAG_INVERT_REVERSE_CONDITION_VALID (4)
#define LRP_PREPROCESSOR_WORD_INVERSEPREPOSITIONS_DATABASE_TAG_INVERT_REVERSE_CONDITION_VALID_VALUE_TRUE "1"
#define LRP_PREPROCESSOR_WORD_INVERSEPREPOSITIONS_DATABASE_TAG_INVERT_REVERSE_CONDITION_VALID_VALUE_FALSE "0"
#endif
#define LRP_PREPROCESSOR_WORD_IRREGULARNOUN_DATABASE_NUMBER_OF_TAGS (2)
#define LRP_PREPROCESSOR_WORD_IRREGULARNOUN_DATABASE_TAG_NOUN_SINGULAR_FORM (1)
#define LRP_PREPROCESSOR_WORD_IRREGULARNOUN_DATABASE_TAG_NOUN_PLURAL_FORM (2)

#define LRP_PREPROCESSOR_WORD_PHRASALVERB_REPLACEMENT_STRING_DEFAULT ""	//will be tense specific

#define LRP_PREPROCESSOR_WORD_PHRASALVERB_DATABASE_TAG_ARBITRARYNAME_SOMEBODY_NUMBER_OF_TYPES (3)
static string lrpPhrasalVerbDatabaseTagArbitraryNameArray[LRP_PREPROCESSOR_WORD_PHRASALVERB_DATABASE_TAG_ARBITRARYNAME_SOMEBODY_NUMBER_OF_TYPES] = {LRP_PREPROCESSOR_WORD_PHRASALVERB_DATABASE_TAG_ARBITRARYNAME_SOMETHING_NAME, LRP_PREPROCESSOR_WORD_PHRASALVERB_DATABASE_TAG_ARBITRARYNAME_SOMEWHERE_NAME, LRP_PREPROCESSOR_WORD_PHRASALVERB_DATABASE_TAG_ARBITRARYNAME_SOMEBODY_NAME};

#define LRP_PREPROCESSOR_WORD_NUMBER_OF_VOWELS (5)
#define LRP_PREPROCESSOR_WORD_NUMBER_OF_CONSTONANTS (21)
static char englishVowelArray[LRP_PREPROCESSOR_WORD_NUMBER_OF_VOWELS] = {'a', 'e', 'i', 'o', 'u'};
static char englishConsonantArray[LRP_PREPROCESSOR_WORD_NUMBER_OF_CONSTONANTS] = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'};
/*
#define LRP_PREPROCESSOR_WORD_VERB_DOUBLE_CONSONANT_RULE1_LAST_LETTER_EXCEPTIONS_NUMBER_OF_TYPES (4)
static char lrpVerbDoubleConsonantRuleOneLastLetterExceptions[LRP_PREPROCESSOR_WORD_VERB_DOUBLE_CONSONANT_RULE1_LAST_LETTER_EXCEPTIONS_NUMBER_OF_TYPES] = {'w', 'x', 'y', 'z'};
*/

#define LRP_NLP_NUMBER_OF_PUNCTUATION_MARK_CHARACTERS (6)		//CHECKTHIS; need to location RelEx/Stanford dependency relation specification and match the exact same punction marks detected
static char nlpPunctionMarkCharacterArray[LRP_NLP_NUMBER_OF_PUNCTUATION_MARK_CHARACTERS] = {CHAR_FULLSTOP, CHAR_COMMA, CHAR_SEMICOLON, CHAR_COLON, CHAR_QUESTIONMARK};	//CHAR_EXCLAMATION_MARK - currently interpreted as math [CHECKTHIS]
#ifdef LRP_PREPROCESSOR_WORD_NLP_PARSABLE_PHRASE_SUPPORT_MATH_GROUPING
	#define LRP_NLP_NUMBER_OF_MATH_CHARACTERS_GROUPED (8)
	static char nlpMathCharacterGroupedArray[LRP_NLP_NUMBER_OF_MATH_CHARACTERS_GROUPED] = {CHAR_EQUALS, CHAR_PLUS, CHAR_GREATER_THAN, CHAR_LESS_THAN, CHAR_AMPERSAND, CHAR_TILDA, CHAR_EXCLAMATION_MARK, CHAR_STAR};
	#define LRP_NLP_NUMBER_OF_MATH_CHARACTERS_UNGROUPED (2)
	static char nlpMathCharacterUngroupedArray[LRP_NLP_NUMBER_OF_MATH_CHARACTERS_UNGROUPED] = {CHAR_OPEN_BRACKET, CHAR_CLOSE_BRACKET};
	#define LRP_NLP_NUMBER_OF_MATH_CHARACTERS (10)
	static char nlpMathCharacterArray[LRP_NLP_NUMBER_OF_MATH_CHARACTERS] = {CHAR_EQUALS, CHAR_PLUS, CHAR_GREATER_THAN, CHAR_LESS_THAN, CHAR_AMPERSAND, CHAR_TILDA, CHAR_EXCLAMATION_MARK, CHAR_STAR, CHAR_OPEN_BRACKET, CHAR_CLOSE_BRACKET};
#else
	#define LRP_NLP_NUMBER_OF_MATH_CHARACTERS (10)		//CHECKTHIS; need to location RelEx/Stanford dependency relation specification and match the exact same punction marks detected. Also must be matched to NLC_PREPROCESSOR_MATH_OPERATOR...
	static char nlpMathCharacterArray[LRP_NLP_NUMBER_OF_MATH_CHARACTERS] = {CHAR_OPEN_BRACKET, CHAR_CLOSE_BRACKET, CHAR_EQUALS, CHAR_PLUS, CHAR_GREATER_THAN, CHAR_LESS_THAN, CHAR_AMPERSAND, CHAR_TILDA, CHAR_EXCLAMATION_MARK, CHAR_STAR};	//CHAR_DASH? what about 3-5 [currently interpreted as 1 word]
#endif
#define LRP_NLP_NUMBER_OF_PUNCTUATION_MARK_CHARACTERS_END_OF_SENTENCE (2)
static char nlpPunctionMarkCharacterEndOfSentenceArray[LRP_NLP_NUMBER_OF_PUNCTUATION_MARK_CHARACTERS_END_OF_SENTENCE] = {CHAR_FULLSTOP, CHAR_QUESTIONMARK};
#define LRP_NLP_NUMBER_OF_WHITESPACE_CHARACTERS (3)		//CHECKTHIS; need to location RelEx/Stanford dependency relation specification and match the exact same punction marks detected
static char nlpWhitespaceCharacterArray[LRP_NLP_NUMBER_OF_WHITESPACE_CHARACTERS] = {CHAR_NEWLINE, CHAR_TAB, CHAR_SPACE};
#define LRP_NLP_NUMBER_OF_QUOTATIONMARK_CHARACTERS (2)
static char nlpQuotationMarkCharacterArray[LRP_NLP_NUMBER_OF_QUOTATIONMARK_CHARACTERS] = {CHAR_INVERTED_COMMAS, CHAR_APOSTROPHE};

#define LRP_NLP_NUMBER_OF_PUNCTUATION_MARK_CHARACTERS_END_OF_SENTENCE_FULLSTOP (STRING_FULLSTOP)
#define LRP_NLP_NUMBER_OF_PUNCTUATION_MARK_CHARACTERS_END_OF_SENTENCE_QUESTIONMARK (STRING_QUESTIONMARK)

/*
#ifdef LRP_PREPROCESSOR_POS_TAGGER
#define LRP_NLP_NUMBER_OF_NORMAL_WORD_CHARACTERS (53)
static char nlpNormalWordCharacterArray[LRP_NLP_NUMBER_OF_NORMAL_WORD_CHARACTERS] = {'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '_'};
#endif
*/

#define LRP_PREPROCESSOR_WORD_LOWER_CASE_LETTERS_NUMBER_OF_TYPES (26)
static char preprocessorLowerCaseLettersArray[LRP_PREPROCESSOR_WORD_LOWER_CASE_LETTERS_NUMBER_OF_TYPES] = {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'};
#define LRP_PREPROCESSOR_WORD_UPPER_CASE_LETTERS_NUMBER_OF_TYPES (26)
static char preprocessorUpperCaseLettersArray[LRP_PREPROCESSOR_WORD_UPPER_CASE_LETTERS_NUMBER_OF_TYPES] = {'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'};
#define LRP_PREPROCESSOR_WORD_LOWER_OR_UPPER_CASE_LETTERS_NUMBER_OF_TYPES (52)
static char preprocessorLowerOrUpperCaseLettersArray[LRP_PREPROCESSOR_WORD_LOWER_OR_UPPER_CASE_LETTERS_NUMBER_OF_TYPES] = {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'};


#define LRP_PREPROCESSOR_WORD_DUMMY_COLLAPSED_PHRASAL_VERB_LEMMA_NAME_FOR_NLP "fight"	//arbitrary verb
#define LRP_PREPROCESSOR_WORD_DUMMY_COLLAPSED_PHRASAL_VERB_LEMMA_NAME_FOR_NLP_TENSE_FORM_PRESENT "fights"
#define LRP_PREPROCESSOR_WORD_DUMMY_COLLAPSED_PHRASAL_VERB_LEMMA_NAME_FOR_NLP_TENSE_FORM_CONTINUOUS "fighting"
#define LRP_PREPROCESSOR_WORD_DUMMY_COLLAPSED_PHRASAL_VERB_LEMMA_NAME_FOR_NLP_TENSE_FORM_PAST "fought"
#define LRP_PREPROCESSOR_WORD_DUMMY_COLLAPSED_PHRASAL_VERB_LEMMA_NAME_FOR_NLP_TENSE_FORM_PASTPARTICIPLE "fought"
static string lrpDummyCollapsedPhrasalVerbNameForNLPgrammaticalTenseFormsArray[LRP_PREPROCESSOR_WORD_VERB_DATABASE_TAG_BASE_MAX_NUM_TENSE_FORMS] = {"", LRP_PREPROCESSOR_WORD_DUMMY_COLLAPSED_PHRASAL_VERB_LEMMA_NAME_FOR_NLP, LRP_PREPROCESSOR_WORD_DUMMY_COLLAPSED_PHRASAL_VERB_LEMMA_NAME_FOR_NLP_TENSE_FORM_PRESENT, LRP_PREPROCESSOR_WORD_DUMMY_COLLAPSED_PHRASAL_VERB_LEMMA_NAME_FOR_NLP_TENSE_FORM_CONTINUOUS, LRP_PREPROCESSOR_WORD_DUMMY_COLLAPSED_PHRASAL_VERB_LEMMA_NAME_FOR_NLP_TENSE_FORM_PAST, LRP_PREPROCESSOR_WORD_DUMMY_COLLAPSED_PHRASAL_VERB_LEMMA_NAME_FOR_NLP_TENSE_FORM_PASTPARTICIPLE};

/*
#define LRP_PREPROCESSOR_WORD_DUMMY_COLLAPSED_MULTIWORD_PREPOSITION_NAME_FOR_NLP_SENTENCE_INSTANCE_0 "dummy{reposition1"
#define LRP_PREPROCESSOR_WORD_DUMMY_COLLAPSED_MULTIWORD_PREPOSITION_NAME_FOR_NLP_SENTENCE_INSTANCE_1 "dummy{reposition2"
#define LRP_PREPROCESSOR_WORD_DUMMY_COLLAPSED_MULTIWORD_PREPOSITION_NAME_FOR_NLP_SENTENCE_INSTANCE_2 "dummy{reposition3"
#define LRP_PREPROCESSOR_WORD_DUMMY_COLLAPSED_MULTIWORD_PREPOSITION_NAME_FOR_NLP_SENTENCE_INSTANCE_3 "dummy{reposition4"
#define LRP_PREPROCESSOR_WORD_DUMMY_COLLAPSED_MULTIWORD_PREPOSITION_NAME_FOR_NLP_SENTENCE_INSTANCE_4 "dummy{reposition5"
#define LRP_PREPROCESSOR_WORD_DUMMY_COLLAPSED_MULTIWORD_PREPOSITION_NAME_FOR_NLP_MAX_NUMBER_SENTENCE_INSTANCES (5)
string lrpDummyCollapsedMultiwordPrepositionLemmaNameForNLPArray[LRP_PREPROCESSOR_WORD_DUMMY_COLLAPSED_MULTIWORD_PREPOSITION_NAME_FOR_NLP_MAX_NUMBER_SENTENCE_INSTANCES] = {LRP_PREPROCESSOR_WORD_DUMMY_COLLAPSED_MULTIWORD_PREPOSITION_NAME_FOR_NLP_SENTENCE_INSTANCE_0, LRP_PREPROCESSOR_WORD_DUMMY_COLLAPSED_MULTIWORD_PREPOSITION_NAME_FOR_NLP_SENTENCE_INSTANCE_1, LRP_PREPROCESSOR_WORD_DUMMY_COLLAPSED_MULTIWORD_PREPOSITION_NAME_FOR_NLP_SENTENCE_INSTANCE_2, LRP_PREPROCESSOR_WORD_DUMMY_COLLAPSED_MULTIWORD_PREPOSITION_NAME_FOR_NLP_SENTENCE_INSTANCE_3, LRP_PREPROCESSOR_WORD_DUMMY_COLLAPSED_MULTIWORD_PREPOSITION_NAME_FOR_NLP_SENTENCE_INSTANCE_4};
*/

#define LRP_PREPROCESSOR_WORD_DUMMY_COLLAPSED_PHRASAL_VERB_EXACT_DEFINED_SECTION_TYPE 1
#define LRP_PREPROCESSOR_WORD_DUMMY_COLLAPSED_MULTIWORD_UNDEFINED_TYPE (LRP_PREPROCESSOR_POS_TYPE_UNDEFINED)
#define LRP_PREPROCESSOR_WORD_DUMMY_COLLAPSED_MULTIWORD_PREPOSITION_TYPE (LRP_PREPROCESSOR_POS_TYPE_PREPOSITION)


#define MAXIMUM_NUMBER_WORDS_PER_SENTENCE 1000	//same value from GIAtranslatorOperations.h


#ifdef LRP_PREPROCESSOR_DERIVE_NOUN_VARIANTS
#define GIA_TRANSLATOR_ENGLISH_CONSONANTS_NUMBER_OF_TYPES (21)
static char translatorEnglishConsonants[GIA_TRANSLATOR_ENGLISH_CONSONANTS_NUMBER_OF_TYPES] = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'x', 'z', 'w', 'y'};		//usually W and Y.
//#define GIA_TRANSLATOR_ENGLISH_VOWELS_NUMBER_OF_TYPES (5)
//static char translatorEnglishVowels[GIA_TRANSLATOR_ENGLISH_VOWELS_NUMBER_OF_TYPES] = {'a', 'e', 'i', 'o', 'u'};
#define GIA_TRANSLATOR_ENGLISH_NOUN_PLURAL_MODIFIER_ADDITION_DEFAULT_NUMBER_OF_TYPES (1)
static string translatorEnglishNounPluralModifierAdditionDefaultArray[GIA_TRANSLATOR_ENGLISH_NOUN_PLURAL_MODIFIER_ADDITION_DEFAULT_NUMBER_OF_TYPES] = {"s"};
#define GIA_TRANSLATOR_ENGLISH_NOUN_PLURAL_MODIFIER_ADDITION_NUMBER_OF_TYPES (6)
static string translatorEnglishNounPluralModifierAdditionArray[GIA_TRANSLATOR_ENGLISH_NOUN_PLURAL_MODIFIER_ADDITION_NUMBER_OF_TYPES][2] = {{"ch", "es"}, {"s", "es"}, {"sh", "es"}, {"x", "es"}, {"z", "es"}, {"o", "es"}};
#define GIA_TRANSLATOR_ENGLISH_NOUN_PLURAL_MODIFIER_REPLACEMENT_SUCCEEDING_CONSONANT_NUMBER_OF_TYPES (1)
static string translatorEnglishNounPluralModifierReplacementSucceedingConsonantArray[GIA_TRANSLATOR_ENGLISH_NOUN_PLURAL_MODIFIER_REPLACEMENT_SUCCEEDING_CONSONANT_NUMBER_OF_TYPES][2] = {{"Cy", "Cies"}};
#define GIA_TRANSLATOR_ENGLISH_NOUN_PLURAL_MODIFIER_REPLACEMENT_NUMBER_OF_TYPES (14)
static string translatorEnglishNounPluralModifierReplacementArray[GIA_TRANSLATOR_ENGLISH_NOUN_PLURAL_MODIFIER_REPLACEMENT_NUMBER_OF_TYPES][2] = {{"f", "fe"}, {"fe", "ves"}, {"ix", "ices"}, {"us", "i"}, {"lum", "la"}, {"ium", "ia"}, {"ex", "ices"}, {"um", "a"}, {"a", "ae"}, {"mnus", "mnui"}, {"is", "es"}, {"eau", "eaus"}, {"eau", "eaux"}, {"o", "i"}};
#endif

#ifdef GIA_NEURAL_NETWORK_NON_SEMANTIC
#define GIA_NEURAL_NETWORK_NON_SEMANTIC_PREPROCESSOR_WORD_TYPE_UNDEFINED (0)
#define GIA_NEURAL_NETWORK_NON_SEMANTIC_PREPROCESSOR_WORD_TYPE_CONCEPT (1)
#define GIA_NEURAL_NETWORK_NON_SEMANTIC_PREPROCESSOR_WORD_TYPE_SPECIFIC_CONCEPT (2)
#define GIA_NEURAL_NETWORK_NON_SEMANTIC_PREPROCESSOR_WORD_TYPE_IGNORE (3)
#ifndef GIA_POS_REL_TRANSLATOR_HYBRID_REFERENCE_SET
#define GIA_NEURAL_NETWORK_NON_SEMANTIC_PREPROCESSOR_WORD_TYPE_CONCEPT_DEFINITION (4)
#endif
#endif




class LRPpreprocessorWord
{
public:

	LRPpreprocessorWord(void);
	LRPpreprocessorWord(string tagNameNew);
	~LRPpreprocessorWord(void);
	void initialiseLRPpreprocessorWord();

	string tagName;

	bool plainTextWord;
		
	LRPpreprocessorWord* nextTag;
};

class LRPpreprocessorMultiwordReductionWord: public LRPpreprocessorWord
{
public:

	LRPpreprocessorMultiwordReductionWord(void);
	~LRPpreprocessorMultiwordReductionWord(void);

	bool base;	//used to indicate if the current tag in the phrasal verb is the base verb of the phrasal verb (or lemma) - NB the first word in each phrasal verb defined in the database is assumed to be the lemma, but there may be additional instances
	
	vector<string> grammaticalTenseFormsArray[LRP_PREPROCESSOR_WORD_VERB_DATABASE_TAG_BASE_MAX_NUM_TENSE_FORMS];		//only for lemma	[2: for alternate versions]
	int grammaticalTenseForm;	//for wordLists
	
	/*
	#ifdef LRP_PREPROCESSOR_DERIVE_NOUN_VARIANTS
	vector<string> nounPluralVariants;
	#endif
	*/

	//verb case additional only:
	int grammaticalTenseModifier;
	string baseName;	
	
	LRPpreprocessorMultiwordReductionWord* alternateTagBasic;	
	
};

class LRPpreprocessorMultiwordReductionPhrasalVerbWord: public LRPpreprocessorMultiwordReductionWord
{
public:

	LRPpreprocessorMultiwordReductionPhrasalVerbWord(void);
	~LRPpreprocessorMultiwordReductionPhrasalVerbWord(void);

	bool tagSpecialArbitraryName;	//used to indicate if the current tag is sth/swh/sb
	int tagSpecialArbitraryNameType;
	bool optional;	//used to specify if a tag is optional designated by "(...)" in the phrasal verb database
	//bool primary;	//is the first word in the phrasal verb (assumed to be lemma)?
	//string primaryPhrasalVerbReplacementString;
	//string primaryPhrasalVerbReplacementStringNLPonly;
	LRPpreprocessorMultiwordReductionPhrasalVerbWord* alternateTag;			//used to specify an alternate (but corresponding) tag name designated by "/" in the phrasal verb database
};

class LRPpreprocessorMultiwordReductionIrregularVerbWord: public LRPpreprocessorMultiwordReductionWord
{
public:

	LRPpreprocessorMultiwordReductionIrregularVerbWord(void);
	~LRPpreprocessorMultiwordReductionIrregularVerbWord(void);

	LRPpreprocessorMultiwordReductionIrregularVerbWord* alternateTag;
};


class LRPpreprocessorPlainTextWord: public LRPpreprocessorWord
{
public:
	LRPpreprocessorPlainTextWord(void);
	~LRPpreprocessorPlainTextWord(void);
	void initialiseLRPpreprocessorPlainTextWord();
	
	#ifdef GIA_POS_REL_TRANSLATOR_HYBRID_EXECUTE_PRELIM_POS_TAGGER
	GIAfeature* featureReferencePrelim;
	#endif
	#ifdef LRP_PREPROCESSOR_RECORD_REFERENCES
	GIAfeature* featureReferenceOriginal;
	GIAfeature* featureReference;
	GIAentityNode* entityReference;
	#endif
	
	#ifdef GIA_NEURAL_NETWORK
	ANNneuron* wordShortcutToConceptNeuron;
	#ifdef GIA_NEURAL_NETWORK_NON_SEMANTIC
	int neuralNetworkPreprocessorWordType;
	string tagNameOriginalNonLemma;
	#endif
	#endif

	#ifdef LRP_PREPROCESSOR_POS_TAGGER_DATABASE_NEURAL_NETWORK_EXTERNAL_PERFORM_BATCH_PREDICTIONS
	#ifdef LRP_PREPROCESSOR_POS_TAGGER_DATABASE_FEED_ALL_PERMUTATIONS_INDIVIDUALLY
	vector<ANNexperience*> POStaggerExperiencePermutations;
	#else
	ANNexperience* POStaggerExperience;
	#endif
	#ifdef LRP_PREPROCESSOR_POS_TAGGER_DATABASE_PREDICTION_VERIFICATION
	uint32_t centreWordPOSambiguityInfo;
	#endif
	#endif

	bool alreadyFoundMatch;
	#ifdef SANI_NODES
	//#ifdef GIA_POS_REL_TRANSLATOR_RULES_ITERATE_OVER_UNAMBIGUOUS_POS_PERMUTATIONS_AT_START	//also required for SANI_SEQUENCE_GRAMMAR_REFERENCE_SET_IDENTIFICATION
	uchar unambiguousPOSindex;
	//#else	//also required for SANI_SEQUENCE_GRAMMAR_REFERENCE_SET_IDENTIFICATION
	uint64_t POSambiguityInfo;
	//#endif
	int wordPOStypeInferred;
	int translatorSentenceEntityIndex;
	#ifdef SANI_FORWARD
	int translatorSentenceWordIndex;	//for code efficiency only: = translatorSentenceEntityIndex - 1
	#endif
	#ifdef GIA_POS_REL_TRANSLATOR_RULES
	GIAentityNode* translatorEntity;
	#ifdef GIA_POS_REL_TRANSLATOR_RULES_CODE_COMPONENT_WORD_NOUN_VERB_VARIANT
	int wordVerbVariantGrammaticalTenseForm;
	int wordNounVariantGrammaticalTenseForm;
	#endif
	#endif
	#endif
	
	//#ifdef SANI_SEQUENCE_GRAMMAR_REFERENCE_SET_IDENTIFICATION_VIA_DETERMINERS
	int referenceSetStartCodonDeterminerType;
	//#ifdef SANI_SEQUENCE_GRAMMAR_REFERENCE_SET_IDENTIFICATION_VIA_DETERMINERS_SUPPORT_PRONOUNS
	bool pronounDeterminerDetected;
	bool pronounReferenceDetected;
	//#endif
	//#endif
};

class LRPpreprocessorMultiwordReductionPlainTextWord: public LRPpreprocessorPlainTextWord
{
public:

	LRPpreprocessorMultiwordReductionPlainTextWord(void);
	LRPpreprocessorMultiwordReductionPlainTextWord(string tagNameNew);
	~LRPpreprocessorMultiwordReductionPlainTextWord(void);
	void initialiseLRPpreprocessorMultiwordReductionPlainTextWord();
	
	string tagNameLemma;

	int entityIndex;	//this should be depreciated
	
	bool collapsedPhrasalVerbExactDefinedSection;
	bool collapsedMultiwordWord;
	int collapsedMultiwordWordType;
	//bool collapsedPhrasalVerbExactDefinedSectionTemp;	//not required as searchAndReplacePhrasalVerbs is only ever executed once
	bool collapsedMultiwordWordTemp;	//this is reset everytime searchAndReplaceMultiwordWordList is executed to prevent collapsedMultiwordWord from being redetected
	int grammaticalTenseFormDetected;

	#ifdef LRP_PREPROCESSOR_RECORD_REFERENCES
	LRPpreprocessorMultiwordReductionPlainTextWord* preprocessorUpperLevelWordReference;
	int preprocessorUpperLevelWordReferenceSize;	//number of words in preprocessor upper level phrase corresponding to preprocessor word
	LRPpreprocessorMultiwordReductionPlainTextWord* preprocessorLowerLevelWordReference;
	int characterIndexInSentenceContentsOriginalText; 	//character index in original sentence (without preprocessing): ie record the exact character index of the first character of the word in the original unprocessed sentence text
	#endif
	
	#ifdef LRP_PREPROCESSOR_WORD_MULTIWORD_REDUCTION
	string tagNameLRPforNLP;
	#endif
};



/*
//NOT USED:
class LRPpreprocessorMultiwordReductionSentence
{
public:

	LRPpreprocessorMultiwordReductionSentence(void);
	~LRPpreprocessorMultiwordReductionSentence(void);

	LRPpreprocessorMultiwordReductionSentence* nextSentence;
};
*/

class LRPpreprocessorMultiwordReductionBasicSentence
{
public:

	LRPpreprocessorMultiwordReductionBasicSentence(void);
	~LRPpreprocessorMultiwordReductionBasicSentence(void);

	LRPpreprocessorMultiwordReductionWord* firstTagInSentence;
	
	LRPpreprocessorMultiwordReductionBasicSentence* nextSentence;
};

class LRPpreprocessorMultiwordReductionPhrasalVerbSentence
{
public:

	LRPpreprocessorMultiwordReductionPhrasalVerbSentence(void);
	~LRPpreprocessorMultiwordReductionPhrasalVerbSentence(void);

	LRPpreprocessorMultiwordReductionPhrasalVerbWord* firstTagInSentence;
	LRPpreprocessorMultiwordReductionPhrasalVerbSentence* alternateSentence;		//used to specifiy an alternate (but corresponding) phrasal verb designated by "or" in the phrasal verb database
	
	LRPpreprocessorMultiwordReductionPhrasalVerbSentence* nextSentence;
};

class LRPpreprocessorMultiwordReductionIrregularVerbSentence
{
public:

	LRPpreprocessorMultiwordReductionIrregularVerbSentence(void);
	~LRPpreprocessorMultiwordReductionIrregularVerbSentence(void);

	LRPpreprocessorMultiwordReductionIrregularVerbWord* firstTagInSentence;
	
	LRPpreprocessorMultiwordReductionIrregularVerbSentence* nextSentence;
};



class LRPpreprocessorMultiwordReductionTagTextCorrespondenceInfo
{
public:

	LRPpreprocessorMultiwordReductionTagTextCorrespondenceInfo(void);
	~LRPpreprocessorMultiwordReductionTagTextCorrespondenceInfo(void);

	string wordWithLRP;		//LRP generated word name
	string lemmaWithLRP;		//LRP generated lemma name
	string wordWithLRPforNLPonly;	//temporary/dummy word name such that NLP can properly parse the text

	int entityIndex;	//used to map the NLP dummy replacement lemma to the official LRP generated lemma (for entity name reversion after NLP)
	int sentenceIndex;	//used to map the NLP dummy replacement lemma to the official LRP generated lemma (for entity name reversion after NLP)

	LRPpreprocessorMultiwordReductionTagTextCorrespondenceInfo* next;
};


class LRPpreprocessorWordClassClass
{
	private: SHAREDvarsClass SHAREDvars;

	//#ifdef LRP_PREPROCESSOR_RECORD_REFERENCES
	public: string generateTextFromPreprocessorSentenceWordList(constEffective LRPpreprocessorPlainTextWord* firstWordInSentence);
		public: string generateTextFromPreprocessorSentenceWordList(constEffective LRPpreprocessorPlainTextWord* firstWordInSentence, const bool LRPforNLP);
	public: string generateTextFromVectorWordList(const vector<LRPpreprocessorPlainTextWord*>* wordList);
		public: string generateTextFromVectorWordList(const vector<LRPpreprocessorPlainTextWord*>* wordList, const bool LRPforNLP);
			public: string generateTextFromPreprocessorSentenceWord(constEffective LRPpreprocessorPlainTextWord* word, const bool LRPforNLP, const bool isFirstWordInSentence);
	public: int calculateLengthOfGeneratedVectorWordListText(const vector<LRPpreprocessorPlainTextWord*>* wordList);
	public: bool generateSentenceWordList(LRPpreprocessorPlainTextWord* sentenceContentsFirstWord, vector<LRPpreprocessorPlainTextWord*>* wordList);
	public: bool generateSentenceWordList(LRPpreprocessorPlainTextWord* sentenceContentsFirstWord, vector<LRPpreprocessorPlainTextWord*>* wordList, const int startIndex, const int endIndex);
	public: bool generateFlatSentenceWordList(vector<LRPpreprocessorPlainTextWord*>* wordList, LRPpreprocessorMultiwordReductionPlainTextWord** sentenceContentsFirstWord);
	public: bool addWordListToWordList(vector<LRPpreprocessorPlainTextWord*>* wordList, vector<LRPpreprocessorPlainTextWord*>* wordListToAdd);
	public: bool addStringArrayToWordList(vector<LRPpreprocessorPlainTextWord*>* wordList, const string* stringArrayToAdd, const int arraySize);
	public: bool addStringToWordList(vector<LRPpreprocessorPlainTextWord*>* wordList, const string stringToAdd);
	#ifdef LRP_PREPROCESSOR_WORD_NLP_PARSABLE_PHRASE_SUPPORT_INTRAWORD_PUNCTUATION_MARK
	public: bool isIntrawordPunctuationMark(int indexOfCurrentToken, string* lineContents);
	#endif
	#ifdef LRP_PREPROCESSOR_WORD_NLP_PARSABLE_PHRASE_SUPPORT_APOSTROPHES_POSSESSION_AND_OMISSION
	public: bool isApostrophePossessionOrOmission(int indexOfCurrentToken, string* lineContents);
	public: bool isApostrophePossessionOrOmission(const LRPpreprocessorPlainTextWord* word);
	#endif	
	
	#ifdef LRP_PREPROCESSOR_RECORD_REFERENCES
	public: bool findAndReplaceAllOccurancesSimpleSubstringInWordListWithSimpleSubstring(vector<LRPpreprocessorPlainTextWord*>* wordList, string stringSimpleToFind,  string stringSimpleReplacement);
		public: bool findAndReplaceAllOccurancesSimpleSubstringInWordListWithSimpleSubstring(vector<LRPpreprocessorPlainTextWord*>* wordList, string* stringSimpleToFind,  string* stringSimpleReplacement);
			public: bool findAndReplaceSimpleSubstringInWordListAtIndexWithSimpleSubstring(vector<LRPpreprocessorPlainTextWord*>* wordList, string stringSimpleToFind, int indexToPerformFind, string stringSimpleReplacement);
				public: bool findAndReplaceWordListInWordListAtIndexWithWordList(vector<LRPpreprocessorPlainTextWord*>* wordList, vector<LRPpreprocessorPlainTextWord*>* wordListToFind, int indexToPerformFind, vector<LRPpreprocessorPlainTextWord*>* wordListReplacement);
	public: bool findSimpleSubstringInWordList(const vector<LRPpreprocessorPlainTextWord*>* wordList, string stringSimpleToFind);
		public: bool findSimpleSubstringInWordList(const vector<LRPpreprocessorPlainTextWord*>* wordList, string stringSimpleToFind, const int startIndexToPerformFind);
			public: bool findSubWordListInWordList(const vector<LRPpreprocessorPlainTextWord*>* wordList, vector<LRPpreprocessorPlainTextWord*>* wordListToFind, const int startIndexToPerformFind);	
	public: bool findSimpleSubstringInWordListAtIndex(const vector<LRPpreprocessorPlainTextWord*>* wordList, string stringSimpleToFind, int indexToPerformFind, const bool caseInsensitive);
		public: bool findSubWordListInWordListAtIndex(const vector<LRPpreprocessorPlainTextWord*>* wordList, vector<LRPpreprocessorPlainTextWord*>* wordListToFind, int indexToPerformFind, const bool caseInsensitive);
	public: bool generateSentenceWordListFromStringSimple(vector<LRPpreprocessorPlainTextWord*>* wordList, string* stringSimple);
		
	//these are similiar to C++ string library functions;
	public: int findStringInWordList(vector<LRPpreprocessorPlainTextWord*>* wordList, const string stringToFind);
		public: int findStringInWordList(vector<LRPpreprocessorPlainTextWord*>* wordList, const string stringToFind, int startIndexToPerformFind);
		public: int findStringInWordListReverse(vector<LRPpreprocessorPlainTextWord*>* wordList, const string stringToFind, int startIndexToPerformFind);
	

	public: bool findSubstringAtStartOfWordInWordList(vector<LRPpreprocessorPlainTextWord*>* wordList, const string substringToFind);
		public: bool findSubstringAtStartOfWordInWordList(vector<LRPpreprocessorPlainTextWord*>* wordList, const string substringToFind, int startIndexToPerformFind);
	
	public: vector<LRPpreprocessorPlainTextWord*> extractSubWordListInWordList(vector<LRPpreprocessorPlainTextWord*>* wordList, int startIndexToExtract);
		public: vector<LRPpreprocessorPlainTextWord*> extractSubWordListInWordList(vector<LRPpreprocessorPlainTextWord*>* wordList, int startIndexToExtract, int numberOfWordsToExtract);
	
	public: bool insertWordListIntoWordList(vector<LRPpreprocessorPlainTextWord*>* wordList, vector<LRPpreprocessorPlainTextWord*>* wordListToInsert, int indexToInsert);
	public: bool insertStringIntoWordList(vector<LRPpreprocessorPlainTextWord*>* wordList, const string stringToInsert, int indexToInsert);
		public: bool insertWordIntoWordList(vector<LRPpreprocessorPlainTextWord*>* wordList, LRPpreprocessorPlainTextWord* wordToInsert, int indexToInsert);
	
	public: bool wordListFindAndRemoveAllOccurancesSimpleSubstringInWordList(vector<LRPpreprocessorPlainTextWord*>* wordList, const string stringToFind);
		public: bool removeWordFromWordList(vector<LRPpreprocessorPlainTextWord*>* wordList, int indexToRemove);
			public: bool removeWordsFromWordList(vector<LRPpreprocessorPlainTextWord*>* wordList, int indexToRemove, int numberElementsToRemove);
			
	public: bool replaceWordListAtIndexWithSimpleSubstring(vector<LRPpreprocessorPlainTextWord*>* wordList, int indexToPerformReplacement, string stringSimpleReplacement);
		public: bool replaceWordListAtIndexWithSimpleSubstring(vector<LRPpreprocessorPlainTextWord*>* wordList, int indexToPerformReplacement, vector<LRPpreprocessorPlainTextWord*>* wordListReplacement);
	
	public: bool copyWordListAndReplicateWordObjects(const vector<LRPpreprocessorPlainTextWord*>* wordList1, vector<LRPpreprocessorPlainTextWord*>* wordList2);
	public: bool clearWordListAndDeleteWordObjects(vector<LRPpreprocessorPlainTextWord*>* wordList);

	#endif	

	public: bool isWordInWordlist(vector<LRPpreprocessorPlainTextWord*>* wordList, LRPpreprocessorPlainTextWord* word);

	public: bool printWordList(const vector<LRPpreprocessorPlainTextWord*>* wordList);
	public: string printWordListString(const vector<LRPpreprocessorPlainTextWord*>* wordList);
		
	public: void preprocessorFillCurrentWord(LRPpreprocessorMultiwordReductionPlainTextWord** currentWordInSentence, string* currentWord, int* entityIndex, const int lastCharacterIndexOfWordInSentence);
	public: int getPOStypeFromName(const string wordPOStypeName);
	public: bool isStringNumber(const string phrase);
	#ifdef GIA_POS_REL_TRANSLATOR_RULES_TREAT_UNKNOWN_POSTYPES_MID_SENTENCE_CAPITALISED_WORDS_AS_PROPERNOUNS
	public: bool isMidSentenceUppercaseWordLikelyProperNoun(constEffective LRPpreprocessorPlainTextWord* contextWord);
	#endif
	public: bool wordIsUpperCase(string wordText);

	public: int convertSentenceContentsIndexToEntityIndex(const int sentenceContentsIndex);
	public: int convertEntityIndexToSentenceContentsIndex(const int entityIndex);

};




	
#endif
