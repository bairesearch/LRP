/*******************************************************************************
 *
 * No License
 * 
 * This work is under exclusive copyright (c) Baxter AI (baxterai.com). 
 * Nobody else can use, copy, distribute, or modify this work without being 
 * at risk of take-downs, shake-downs, or litigation. 
 * 
 * By publishing this source code in a public repository on GitHub, Terms of 
 * Service have been accepted by which Baxter AI have allowed others to view 
 * and fork their repository.
 * 
 * If you find software that doesn't have a license, that generally means you 
 * have no permission from the creators of the software to use, modify, or 
 * share the software. Although a code host such as GitHub may allow you to 
 * view and fork the code, this does not imply that you are permitted to use, 
 * modify, or share the software for any purpose.
 *
 * This notice has been derived from https://choosealicense.com/no-permission 
 * (https://web.archive.org/web/20180312144938/https://choosealicense.com/no-permission)
 *
 *******************************************************************************/

/*******************************************************************************
 *
 * File Name: LRPglobalsDefs.hpp
 * Author: Richard Bruce Baxter - Copyright (c) 2005-2021 Baxter AI (baxterai.com)
 * Project: Language Reduction Preprocessor
 * Project Version: 3p5a 20-May-2021
 * Requirements: requires plain text file
 * Description: LRP specific global definitions
 * /
 *******************************************************************************/

#ifndef HEADER_LRP_GLOBAL_DEFS
#define HEADER_LRP_GLOBAL_DEFS

#include "SHAREDglobalDefs.hpp"


//#define LRP_DEBUG_DISABLE_3k_CODE
#ifndef LRP_DEBUG_DISABLE_3k_CODE
	#ifdef USE_NLC
		#define LRP_PREPROCESSOR_POS_TYPE_CROSS_REFERENCE_STANFORD_POS_ARRAY_LIMITED	//LRP3l3a	//restores LRPpreprocessorPOStypeCrossReferenceStanfordPos to original state
	#endif
#endif

#define LRP_WORD_INDEX_UNDEFINED (INT_DEFAULT_VALUE)

#define LRP_TRANSLATOR_UNIQUE_CONCATENATION_TYPES_MULTIWORD_WORD_DELIMITER "_"

#ifdef COMPILE_LRP_GENERATE_POS_TAGGER_DATABASE
	#ifdef USE_SANI	//SANI_SEQUENCE_GRAMMAR
		#define LRP_PREPROCESSOR_POS_TAGGER_SEQUENCE	//sentence subset
		#ifdef LRP_PREPROCESSOR_POS_TAGGER_SEQUENCE
			//#define LRP_PREPROCESSOR_POS_TAGGER_DATABASE_TRAIN_AMBIGUOUS_PERMUTATIONS	//disabled LRP3k7a
		#endif
	#else
		#define COMPILE_LRP_GENERATE_POS_TAGGER_DATABASE_ORIG
		#ifdef COMPILE_LRP_GENERATE_POS_TAGGER_DATABASE_ORIG
			#ifdef USE_ANN	//condition added LRP3m7a
				#define LRP_PREPROCESSOR_POS_TAGGER_SENTENCE	//LRP3j6c	//enable for POStagSentence (else POStagSequence) database generation	//optional
			#endif
			#ifndef LRP_PREPROCESSOR_POS_TAGGER_SENTENCE
				#define LRP_PREPROCESSOR_POS_TAGGER_SEQUENCE	//sentence subset
				#ifdef LRP_PREPROCESSOR_POS_TAGGER_SEQUENCE
					#define LRP_PREPROCESSOR_POS_TAGGER_DATABASE_TRAIN_AMBIGUOUS_PERMUTATIONS	//clarification def added LRP3j6a
				#endif
			#endif
			#ifdef LRP_PREPROCESSOR_POS_TAGGER_SENTENCE
				#define LRP_PREPROCESSOR_POS_TAGGER_GENERATE_DATABASE_RAW
			#endif
		#endif
	#endif
#endif
#ifdef LRP_PREPROCESSOR_POS_TAGGER_GENERATE_DATABASE_RAW
	#define LRP_PREPROCESSOR_POS_TAGGER_INCLUDE_CENTRE_WORD_IN_POS_PERMUTATION
	#define LRP_PREPROCESSOR_POS_TAGGER_GENERATE_DATABASE_RAW_SENTENCE_MAX_NUM_WORDS (200)
#endif

//#define LRP_DEBUG_DISABLE_3g_CODE
#ifndef LRP_DEBUG_DISABLE_3g_CODE
	#define LRP_DEFINE_WORD_TRANSLATOR_SENTENCE_ENTITY_INDEX_AT_START	//SANI1g1a	//required for SANI
#endif

//#define LRP_DEBUG_DISABLE_3f_CODE
#ifndef LRP_DEBUG_DISABLE_3f_CODE
	
	#define LRP_PREPROCESSOR_WORD_VERB_VARIANTS_PRORITISE_IRREGULAR_VERB_INFO	//LRP3f2i
	#define LRP_PREPROCESSOR_WORD_NOUN_VARIANTS_PRIORITISE_IRREGULAR_PLURAL_FORM	//LRP3f5a 
	
			
#endif

//#define LRP_DEBUG_DISABLE_3f_CODE
#ifndef LRP_DEBUG_DISABLE_3f_CODE
	#ifdef USE_SANI	//or GIA_POS_REL_TRANSLATOR
			
		/*defined in GIAglobalDefs.hpp;
		//#ifdef GIA_POS_REL_TRANSLATOR_RULES_USE	//FUTURE: apply this restriction (requires relaxing GIA_POS_REL_TRANSLATOR_RULES_GIA3 restrictions)
		#define GIA_POS_REL_TRANSLATOR_RULES
		//#endif
		*/
		//#ifdef GIA_POS_REL_TRANSLATOR_RULES	//not yet defined (implied true)
		
			#define LRP_PREPROCESSOR_DETECT_NUMBERS	//added LRP3n2a based on GIA_POS_REL_TRANSLATOR_RULES_CODE_NUMBERS

			#define GIA_POS_REL_TRANSLATOR_RULES_TREAT_UNKNOWN_POSTYPES	//precondition: all optional strings must have a known pos type to be processed (unknown not supported)
			#ifdef GIA_POS_REL_TRANSLATOR_RULES_TREAT_UNKNOWN_POSTYPES
				//#define GIA_POS_REL_TRANSLATOR_RULES_TREAT_UNKNOWN_POSTYPES_AS_WILDCARDS
				#ifndef GIA_POS_REL_TRANSLATOR_RULES_TREAT_UNKNOWN_POSTYPES_AS_WILDCARDS
					#define GIA_POS_REL_TRANSLATOR_RULES_TREAT_UNKNOWN_POSTYPES_AS_NOUNS
				#endif
				#define GIA_POS_REL_TRANSLATOR_RULES_TREAT_UNKNOWN_POSTYPES_MID_SENTENCE_CAPITALISED_WORDS_AS_PROPERNOUNS	//LRP3f10i
				#ifdef GIA_POS_REL_TRANSLATOR_RULES_TREAT_UNKNOWN_POSTYPES_MID_SENTENCE_CAPITALISED_WORDS_AS_PROPERNOUNS
					//#define GIA_POS_REL_TRANSLATOR_RULES_TREAT_UNKNOWN_POSTYPES_MID_SENTENCE_CAPITALISED_WORDS_AS_PROPERNOUNS_METHOD1	//depreciated @LRP3p4a/SANI1p7a
					#ifndef GIA_POS_REL_TRANSLATOR_RULES_TREAT_UNKNOWN_POSTYPES_MID_SENTENCE_CAPITALISED_WORDS_AS_PROPERNOUNS_METHOD1
						#ifndef GIA_POS_REL_TRANSLATOR_RULES_TREAT_UNKNOWN_POSTYPES_AS_WILDCARDS
							#define GIA_POS_REL_TRANSLATOR_RULES_TREAT_UNKNOWN_POSTYPES_MID_SENTENCE_CAPITALISED_WORDS_AS_PROPERNOUNS_METHOD2	//mandatory @LRP3p4a/SANI1p7a
						#endif
					#endif
				#endif
			#endif
			
			#define GIA_POS_REL_TRANSLATOR_RULES_RECORD_COMPONENT_PARSED_GROUP_REF_NAME_FOR_PRINT
				

			#define LRP_PREPROCESSOR_INITIALISE_WORD_INDEX_LIST_FROM_LRP_FILES	//this is required to detect all possible pos types for wordList words
			#ifdef LRP_PREPROCESSOR_INITIALISE_WORD_INDEX_LIST_FROM_LRP_FILES
				#ifndef SANI_DEBUG_RULES_SYN_REL_TRANSLATOR_OUTPUT_BACKWARDS_COMPATIBILITY
					#define LRP_PREPROCESSOR_INITIALISE_WORD_INDEX_LIST_FROM_LRP_FILES_SUPPORT_UPPERCASE_PROPERNOUN_WORD_LISTS	//NB this is not backwards compatible with GIAsynRelTranslator
					#ifdef LRP_PREPROCESSOR_INITIALISE_WORD_INDEX_LIST_FROM_LRP_FILES_SUPPORT_UPPERCASE_PROPERNOUN_WORD_LISTS
						//#define LRP_PREPROCESSOR_INITIALISE_WORD_INDEX_LIST_FROM_LRP_FILES_SUPPORT_UPPERCASE_PROPERNOUN_WORD_LISTS_IF_FIRST_WORD_OF_SENTENCE_IS_IN_PROPERNOUN_LIST_THEN_CHECK_OTHER_LISTS_ALSO	//alternate implementation (not robust either)
					#endif
				#endif
			#endif
			#define LRP_PREPROCESSOR_REPLACE_VERB_AND_NOUN_LISTS_WITH_VERB_AND_NOUN_LISTS_WITH_VARIANTS
			#ifdef LRP_PREPROCESSOR_REPLACE_VERB_AND_NOUN_LISTS_WITH_VERB_AND_NOUN_LISTS_WITH_VARIANTS
				//#define LRP_PREPROCESSOR_REMOVE_VERB_VARIANT_CONTINUOUS_FROM_NOUN_LISTS	//not possible because some words are both continous verbs and nouns (e.g. running/riding)
				#ifndef LRP_PREPROCESSOR_REMOVE_VERB_VARIANT_CONTINUOUS_FROM_NOUN_LISTS
					//#define GIA_POS_REL_TRANSLATOR_RULES_REINTERPRET_NOUNS_AS_CONTINUOUS_VERBS	//not yet implemented
				#endif
			#endif
			
			/*defined in GIAglobalDefs.hpp;
			#define GIA_POS_REL_TRANSLATOR_RULES_GIA3	//GIA3
			*/
			//#ifdef GIA_POS_REL_TRANSLATOR_RULES_GIA3	//not yet defined (implied true)
				#ifdef USE_NLC
					#define LRP_PREPROCESSOR_WORD_COLLAPSE_NUMERICAL_WORDS_TO_NUMBERS
				#endif
				
				#define LRP_PREPROCESSOR_WORD_STORE_REDUNDANT_SUPERSET_WORD_LISTS	//e.g. record pronoun list, not just specific pronoun lists (not supported by GIA pos tagger; only supported by GIA_POS_REL_TRANSLATOR_RULES)
				
			//#endif
			
		//#endif
	#endif
#endif


//#define LRP_DEBUG_DISABLE_3e_CODE
#ifndef LRP_DEBUG_DISABLE_3e_CODE

	#ifndef COMPILE_LRP_GENERATE_POS_TAGGER_DATABASE
		#define LRP_PREPROCESSOR_POS_TAGGER_DISABLE	//disable prelim pos tagger until GIA/thirdparty pos tagger performance is acceptable
	#endif
	
	//#define LRP_PREPROCESSOR_WORD_DYNAMIC //LRP3e11a	//collapses any two consective words found in same wordlist (ie predicted to be of same pos type); even if this is not 100% accuracy (due to ambiguous POS types) it should be sufficient for GIA pos tagger database training
	#ifdef LRP_PREPROCESSOR_WORD_DYNAMIC
		//#define LRP_PREPROCESSOR_WORD_COLLAPSE_AUXILIARY_LISTS_TO_VERB_LISTS	//assumes GIA LRP wordlists.txt index file includes auxiliary lists (they are not treated as verbs)
		//#define LRP_PREPROCESSOR_WORD_COLLAPSE_AUXILIARY_LISTS_TO_AUXILIARY_LIST	//not yet supported	//assumes GIA LRP wordlists.txt index file includes auxiliary lists (they are not treated as verbs)
		//#define LRP_PREPROCESSOR_WORD_COLLAPSE_PREDETERMINER_LIST_TO_DETERMINER_LIST
	#endif
	
	
	#define LRP_PREPROCESSOR_GRAMMATICALLY_STRICT_VERB_VARIANTS_ONLY_VALUE_IRRELEVANT (false)	//renamed 3n1a - orig name: GIA_POS_REL_TRANSLATOR_GRAMMATICALLY_STRICT_VERB_VARIANTS_ONLY_VALUE_IRRELEVANT
	//#define LRP_PREPROCESSOR_GRAMMATICALLY_STRICT_VERB_VARIANTS_ONLY	//disabled as higher level semantic processing of actions interprets all verb variants (regardless of whether they are grammatically strict verbs) as verbs
	#ifdef LRP_PREPROCESSOR_GRAMMATICALLY_STRICT_VERB_VARIANTS_ONLY
		#define LRP_PREPROCESSOR_GRAMMATICALLY_STRICT_VERB_VARIANTS_ONLY_VALUE (true)
		//#define LRP_PREPROCESSOR_GRAMMATICALLY_STRICT_VERB_VARIANTS_ONLY_BUT_TREAT_CONTINUOUS_AS_VERB
	#else
		#define LRP_PREPROCESSOR_GRAMMATICALLY_STRICT_VERB_VARIANTS_ONLY_VALUE (false)
	#endif
	
	
	#ifdef COMPILE_LRP_GENERATE_POS_TAGGER_DATABASE
		#define LRP_PREPROCESSOR_POS_TAGGER
	#endif
	#ifdef LRP_PREPROCESSOR_POS_TAGGER
		
		#ifdef LRP_PREPROCESSOR_POS_TAGGER_SEQUENCE
			//#define LRP_PREPROCESSOR_POS_TAGGER_DATABASE_DO_NOT_TRAIN_POS_INDEX_OUT_OF_SENTENCE_BOUNDS	//LRP3j6a	//optional: 1) can theoretically increase neural net training performance with !LRP_PREPROCESSOR_POS_TAGGER_DATABASE_TRAIN_AMBIGUOUS_PERMUTATIONS&&!LRP_PREPROCESSOR_POS_TAGGER_DATABASE_GENERATE_SET_OF_ARTIFICIAL_UNAMBIGUOUS_PERMUTATIONS_FOR_EVERY_AMBIGUOUS_PERMUTATION as not overloading training set with sequences containing majority unambigious out of bounds POS). 2) can guarantee that the neural net is provided a min amount of data during training (however will prevent small sentence sequences from being entered into db) 
			#ifdef LRP_PREPROCESSOR_POS_TAGGER_DATABASE_TRAIN_AMBIGUOUS_PERMUTATIONS
				//#define DEBUG_LRP_PREPROCESSOR_POS_TAGGER_DATABASE_CALCULATE_PERCENTAGE_POS_AMBIGUOUS_WORDS	//LRP3j6b	//temp
			#else
				#define LRP_PREPROCESSOR_POS_TAGGER_DATABASE_FEED_ALL_PERMUTATIONS_INDIVIDUALLY	//LRP3e9b			//this is now mandatory for LRP_PREPROCESSOR_POS_TAGGER_DATABASE_FILESYSTEM and LRP_PREPROCESSOR_POS_TAGGER_DATABASE_MAP databases as POSambiguityInfo is no longer restricted to 8 bit (ie is now 64 bit int64_t) - to maintain database performance (>=GIA3e11a) 
				#ifdef LRP_PREPROCESSOR_POS_TAGGER_DATABASE_FEED_ALL_PERMUTATIONS_INDIVIDUALLY
					#define LRP_PREPROCESSOR_POS_TAGGER_DATABASE_GENERATE_SET_OF_ARTIFICIAL_UNAMBIGUOUS_PERMUTATIONS_FOR_EVERY_AMBIGUOUS_PERMUTATION	//clarification def added LRP3j6a
					#ifndef LRP_PREPROCESSOR_POS_TAGGER_DATABASE_GENERATE_SET_OF_ARTIFICIAL_UNAMBIGUOUS_PERMUTATIONS_FOR_EVERY_AMBIGUOUS_PERMUTATION
						#define LRP_PREPROCESSOR_POS_TAGGER_DATABASE_FEED_ALL_PERMUTATIONS_INDIVIDUALLY_ONLY_TRAIN_UNAMBIGUOUS_PERMUTATIONS		//With a classification net or file system DB can risk feeding it with bad hypothetical pos permutations (because will take the permutation predicted with the highest hits), but cannot with a neural net (as this would degrade neural net performance; there would be more than 1 bad permutation for every good permutation fed on average)?
						#ifndef LRP_PREPROCESSOR_POS_TAGGER_DATABASE_FEED_ALL_PERMUTATIONS_INDIVIDUALLY_ONLY_TRAIN_UNAMBIGUOUS_PERMUTATIONS
							//#define LRP_PREPROCESSOR_POS_TAGGER_DATABASE_FEED_ALL_PERMUTATIONS_INDIVIDUALLY_ASSIGN_WEIGHTS_TO_TRAINED_POS_TYPES	//LRP3e11a - this is required to compensate for always ambiguous POStypes (e.g. auxiliary "have" [can be a verb also]); the more specialised POStype hypothesis (e.g. auxiliary) is assigned a higher weight than the less specialised POStype hypothesis (e.g. verb) - derived from wordlist size
							#ifdef LRP_PREPROCESSOR_POS_TAGGER_DATABASE_FEED_ALL_PERMUTATIONS_INDIVIDUALLY_ASSIGN_WEIGHTS_TO_TRAINED_POS_TYPES
								#define LRP_PREPROCESSOR_POS_TAGGER_DATABASE_FEED_ALL_PERMUTATIONS_INDIVIDUALLY_ASSIGN_WEIGHTS_TO_TRAINED_POS_TYPES_WEIGHT_STANDARD (1.0)
								#define LRP_PREPROCESSOR_POS_TAGGER_DATABASE_FEED_ALL_PERMUTATIONS_INDIVIDUALLY_ASSIGN_WEIGHTS_TO_TRAINED_POS_TYPES_WEIGHT_HIGH (2.0)
							#endif
						#endif
					#endif
				#endif
			#endif
		#endif

		#define LRP_PREPROCESSOR_POS_TAGGER_DATABASE_PREDICTION_VERIFICATION	//LRP3e9b
	
		#ifdef COMPILE_LRP_GENERATE_POS_TAGGER_DATABASE
			#define LRP_PREPROCESSOR_POS_TAGGER_GENERATE_DATABASE		//this only has to be executed once on a large wiki dataset
		#endif
				
		//#define LRP_PREPROCESSOR_POS_TAGGER_ONLY_ADD_DATABASE_ENTRY_IF_POS_AMBIGUITY_INFO_FOUND_FOR_EVERY_CONTEXT_WORD	//CHECKTHIS
		#define LRP_PREPROCESSOR_DISALLOW_EMPTY_SENTENCE_OBJECTS
		//#define LRP_PREPROCESSOR_WORD_LIST_USE_INTERJECTIONS
		
		
		#define LRP_PREPROCESSOR_POS_TAGGER_MAX_CONTEXT_WORDS_IN_DATABASE_POS_PERMUTATION (10)	//5 each side	//so max size of POS permutation = 8*10 = 80 bit integer
		
		
		#define LRP_PREPROCESSOR_POS_TAGGER_DATABASE_MEMORY_FREE_DELETE_PREPROCESSOR_SENTENCES_ONCE_PROCESSED
		#ifdef USE_ANN
			#define LRP_PREPROCESSOR_POS_TAGGER_DATABASE_NEURAL_NETWORK	//LRP3e4a
		#endif
		#ifdef LRP_PREPROCESSOR_POS_TAGGER_SENTENCE
			#define LRP_PREPROCESSOR_POS_TAGGER_GENERATE_DATABASE_WITHOUT_TARGET_CLASSES
			#define LRP_PREPROCESSOR_POS_TAGGER_GENERATE_DATABASE_EXCLUDE_POS_INDEX_OUT_OF_SENTENCE_BOUNDS
		#endif
		#ifndef LRP_PREPROCESSOR_POS_TAGGER_DATABASE_NEURAL_NETWORK
			#ifdef LRP_PREPROCESSOR_POS_TAGGER_DATABASE_FEED_ALL_PERMUTATIONS_INDIVIDUALLY_ONLY_TRAIN_UNAMBIGUOUS_PERMUTATIONS
				#define LRP_PREPROCESSOR_POS_TAGGER_DATABASE_FILESYSTEM	//LRP3e3a
				#ifndef LRP_PREPROCESSOR_POS_TAGGER_DATABASE_FILESYSTEM
					#define LRP_PREPROCESSOR_POS_TAGGER_DATABASE_MAP	//LRP3e2a
				#endif
			#else
			//error (no POS tagger database defined)
			#endif
		#endif
		
		#ifdef LRP_PREPROCESSOR_POS_TAGGER_DATABASE_NEURAL_NETWORK
			#define LRP_PREPROCESSOR_POS_TAGGER_DATABASE_PERSISTENT
			#ifndef DEBUG_LRP_PREPROCESSOR_POS_TAGGER_DATABASE_CALCULATE_PERCENTAGE_POS_AMBIGUOUS_WORDS	
				#define LRP_PREPROCESSOR_POS_TAGGER_DATABASE_NEURAL_NETWORK_EXTERNAL	//LRP3e6a	//use keras (execute external python scripts)
				#ifndef LRP_PREPROCESSOR_POS_TAGGER_DATABASE_NEURAL_NETWORK_EXTERNAL
					#define LRP_PREPROCESSOR_POS_TAGGER_DATABASE_NEURAL_NETWORK_INTERNAL
				#endif
			#endif
			#ifdef LRP_PREPROCESSOR_POS_TAGGER_DATABASE_NEURAL_NETWORK_EXTERNAL
				#define LRP_PREPROCESSOR_POS_TAGGER_DATABASE_NEURAL_NETWORK_USE_ANN	//LRP3j2a
				#define LRP_PREPROCESSOR_POS_TAGGER_DATABASE_NEURAL_NETWORK_EXTERNAL_PERFORM_BATCH_PREDICTIONS	//speeds up external neural net prediction process
				#define GIA_DEBUG_PREPROCESSOR_POS_TAGGER_DATABASE_NEURAL_NETWORK_EXTERNAL_PRINT_PREDICTIONS	//temp
				#define LRP_PREPROCESSOR_POS_TAGGER_DATABASE_NEURAL_NETWORK_EXTERNAL_MEMORY_FREE_WRITE_EXPERIENCES_DIRECTLY_TO_FILE
				//#define LRP_PREPROCESSOR_POS_TAGGER_DATABASE_NEURAL_NETWORK_EXTERNAL_TRAIN_EXECUTE_FEED	//currently disabled due to a combination of a memory leak and the size of the batch data
				//#define LRP_PREPROCESSOR_POS_TAGGER_DATABASE_NEURAL_NETWORK_EXTERNAL_TRAIN_SINGLE_BATCH_ONLY	//currently required due to a combination of a memory leak and the size of the batch data
				#ifdef LRP_PREPROCESSOR_POS_TAGGER_DATABASE_NEURAL_NETWORK_EXTERNAL_TRAIN_SINGLE_BATCH_ONLY
					#ifdef LRP_PREPROCESSOR_POS_TAGGER_DATABASE_NEURAL_NETWORK_EXTERNAL_TRAIN_EXECUTE_FEED
						#define LRP_PREPROCESSOR_POS_TAGGER_DATABASE_NEURAL_NETWORK_EXTERNAL_TRAIN_EXECUTE_FEED_SINGLE_BATCH_ONLY 
					#endif
				#else
					#ifdef LRP_PREPROCESSOR_POS_TAGGER_DATABASE_NEURAL_NETWORK_EXTERNAL_TRAIN_EXECUTE_FEED
						#define LRP_PREPROCESSOR_POS_TAGGER_DATABASE_NEURAL_NETWORK_EXTERNAL_TRAIN_EXECUTE_FEED_SINGLE_EPOCH_ONLY	//optional
					#endif
				#endif
				#define LRP_PREPROCESSOR_POS_TAGGER_DATABASE_NEURAL_NETWORK_EXTERNAL_BATCH_FILE_DELIMITER (STRING_SPACE)
				#define LRP_PREPROCESSOR_POS_TAGGER_DATABASE_NEURAL_NETWORK_EXTERNAL_X_TRAIN_BATCH_FILE_NAME_PARTA "XtrainBatch"
				#define LRP_PREPROCESSOR_POS_TAGGER_DATABASE_NEURAL_NETWORK_EXTERNAL_Y_TRAIN_BATCH_FILE_NAME_PARTA "YtrainBatch"
				#define LRP_PREPROCESSOR_POS_TAGGER_DATABASE_NEURAL_NETWORK_EXTERNAL_X_PREDICT_BATCH_FILE_NAME_PREPEND "XpredictBatch"
				#define LRP_PREPROCESSOR_POS_TAGGER_DATABASE_NEURAL_NETWORK_EXTERNAL_Y_PREDICT_BATCH_FILE_NAME_PREPEND "YpredictBatch"
				#define LRP_PREPROCESSOR_POS_TAGGER_DATABASE_NEURAL_NETWORK_EXTERNAL_BATCH_FILE_EXTENSION ".dat"
				#define LRP_PREPROCESSOR_POS_TAGGER_DATABASE_NEURAL_NETWORK_EXTERNAL_SCRIPT_NAME_FORM "GIAPOStaggerNeuralNetworkForm"
				#define LRP_PREPROCESSOR_POS_TAGGER_DATABASE_NEURAL_NETWORK_EXTERNAL_SCRIPT_NAME_TRAIN "GIAPOStaggerNeuralNetworkTrain"
				#define LRP_PREPROCESSOR_POS_TAGGER_DATABASE_NEURAL_NETWORK_EXTERNAL_SCRIPT_NAME_TRAIN_EPOCH "GIAPOStaggerNeuralNetworkTrainEpoch"
				#define LRP_PREPROCESSOR_POS_TAGGER_DATABASE_NEURAL_NETWORK_EXTERNAL_SCRIPT_NAME_TRAIN_EPOCH_BATCH "GIAPOStaggerNeuralNetworkTrainEpochBatch"
				#define LRP_PREPROCESSOR_POS_TAGGER_DATABASE_NEURAL_NETWORK_EXTERNAL_SCRIPT_NAME_TEST "GIAPOStaggerNeuralNetworkTest"
				#define LRP_PREPROCESSOR_POS_TAGGER_DATABASE_NEURAL_NETWORK_EXTERNAL_SCRIPT_NAME_PREDICT "GIAPOStaggerNeuralNetworkPredict"
				#define LRP_PREPROCESSOR_POS_TAGGER_DATABASE_NEURAL_NETWORK_EXTERNAL_SCRIPT_NAME_PREDICT_RETURN_ERRORS "GIAPOStaggerNeuralNetworkPredictReturnErrors"
				#define LRP_PREPROCESSOR_POS_TAGGER_DATABASE_NEURAL_NETWORK_EXTERNAL_SCRIPT_EXTENSION ".py"
				#define LRP_PREPROCESSOR_POS_TAGGER_DATABASE_NEURAL_NETWORK_EXTERNAL_Y_TRAIN_HOT_ENCODED	//keras y_train/y_test array is hot encoded
				//#define LRP_PREPROCESSOR_POS_TAGGER_DATABASE_NEURAL_NETWORK_EXTERNAL_Y_PREDICT_HOT_ENCODED	//keras y_predict is not hot encoded
			#endif
			#ifdef LRP_PREPROCESSOR_POS_TAGGER_DATABASE_NEURAL_NETWORK_INTERNAL
				#define LRP_PREPROCESSOR_POS_TAGGER_DATABASE_NEURAL_NETWORK_INTERNAL_ANN_DEBUG_WRITE_NN_FREQUENTLY	//debug
				//#define LRP_PREPROCESSOR_POS_TAGGER_DATABASE_NEURAL_NETWORK_INTERNAL_CLASSIFICATION_NET	//LRP3e9b
				#ifdef LRP_PREPROCESSOR_POS_TAGGER_DATABASE_NEURAL_NETWORK_INTERNAL_CLASSIFICATION_NET
					#define LRP_PREPROCESSOR_POS_TAGGER_DATABASE_NEURAL_NETWORK_INTERNAL_CLASSIFICATION_NET_TRAIN_EXPERIENCE_OUTPUT_VALUE_NOT_USED (0.0)
				#endif
			#endif
			#define LRP_PREPROCESSOR_POS_TAGGER_DATABASE_NEURAL_NETWORK_INPUT_WORD_LIST_ARRAY_START (0)
			#ifdef LRP_PREPROCESSOR_POS_TAGGER_INCLUDE_CENTRE_WORD_IN_POS_PERMUTATION_OLD
				#define LRP_PREPROCESSOR_POS_TAGGER_DATABASE_NEURAL_NETWORK_INPUT_CENTRE_WORD_NOTUSED (LRP_PREPROCESSOR_POS_TAGGER_DATABASE_POS_INDEX_OUT_OF_SENTENCE_BOUNDS)
			#endif
			#define LRP_PREPROCESSOR_POS_TAGGER_DATABASE_NEURAL_NETWORK_NUMBER_OF_INPUT_NEURONS_PER_CONTEXT_WORD (LRP_PREPROCESSOR_POS_TAGGER_DATABASE_POS_NUMBER_OF_TYPES)
			//#define LRP_PREPROCESSOR_POS_TAGGER_DATABASE_NEURAL_NETWORK_NUMBER_OF_INPUT_NEURONS (LRP_PREPROCESSOR_POS_TAGGER_DATABASE_NEURAL_NETWORK_NUMBER_OF_INPUT_NEURONS_PER_CONTEXT_WORD*LRP_PREPROCESSOR_POS_TAGGER_MAX_CONTEXT_WORDS_IN_DATABASE_POS_PERMUTATION)
			#define LRP_PREPROCESSOR_POS_TAGGER_DATABASE_NEURAL_NETWORK_NUMBER_OF_OUTPUT_NEURONS (LRP_PREPROCESSOR_POS_TYPE_ARRAY_NUMBER_OF_TYPES)
			#define LRP_PREPROCESSOR_POS_TAGGER_DATABASE_NEURAL_NETWORK_NUMBER_OF_LAYERS (4)	//try 3->5; this should provide sufficient non-linearity of underlying representation of data
		#endif
		#ifdef LRP_PREPROCESSOR_POS_TAGGER_DATABASE_FILESYSTEM
			#define LRP_PREPROCESSOR_POS_TAGGER_DATABASE_PERSISTENT
			//#define LRP_PREPROCESSOR_POS_TAGGER_DATABASE_FILESYSTEM_EFFICIENT_OVERWRITE_EXISTENT_REFERENCES_WITH_NEW_NUMBER_OF_INSTANCES
			//#define LRP_PREPROCESSOR_POS_TAGGER_DATABASE_FILESYSTEM_TEST_MODE_LOAD_ALL_ENTRIES_UPON_READ
		#endif
		//#define LRP_PREPROCESSOR_POS_TAGGER_INCLUDE_CENTRE_WORD_IN_POS_PERMUTATION	//artificially improves neural net performance by training using the output as an input feature (simulation paradigm)
		#ifdef LRP_PREPROCESSOR_POS_TAGGER_INCLUDE_CENTRE_WORD_IN_POS_PERMUTATION
			#ifdef LRP_PREPROCESSOR_POS_TAGGER_DATABASE_NEURAL_NETWORK_INTERNAL_CLASSIFICATION_NET
				#define LRP_PREPROCESSOR_POS_TAGGER_INCLUDE_CENTRE_WORD_IN_POS_PERMUTATION_EVEN_IF_AMBIGUOUS
			#endif
		#endif

		#ifdef LRP_PREPROCESSOR_POS_TAGGER_DATABASE_FEED_ALL_PERMUTATIONS_INDIVIDUALLY
			#ifdef LRP_PREPROCESSOR_POS_TAGGER_DATABASE_NEURAL_NETWORK
				#define LRP_PREPROCESSOR_POS_TAGGER_DATABASE_NEURAL_NETWORK_PREDICT_RETURN_ERRORS	//will become mandatory in the future
			#endif
		#endif
		
		#ifdef LRP_PREPROCESSOR_POS_TAGGER_INCLUDE_CENTRE_WORD_IN_POS_PERMUTATION
			#define LRP_PREPROCESSOR_POS_TAGGER_MAX_WORDS_IN_DATABASE_POS_PERMUTATION (LRP_PREPROCESSOR_POS_TAGGER_MAX_CONTEXT_WORDS_IN_DATABASE_POS_PERMUTATION+1)
		#else
			#define LRP_PREPROCESSOR_POS_TAGGER_MAX_WORDS_IN_DATABASE_POS_PERMUTATION (LRP_PREPROCESSOR_POS_TAGGER_MAX_CONTEXT_WORDS_IN_DATABASE_POS_PERMUTATION)
		#endif

		#define LRP_PREPROCESSOR_POS_TAGGER_DATABASE_POS_MAX_BITS_INTERMEDIATE (64)	//size(uint64_t), i.e. 64 == LRP_PREPROCESSOR_POS_TAGGER_DATABASE_POS_MAX_NUMBER_OF_TYPES_THEORETICAL
		#ifndef LRP_PREPROCESSOR_POS_TAGGER_DATABASE_NEURAL_NETWORK
			#ifdef LRP_PREPROCESSOR_POS_TAGGER_DATABASE_FEED_ALL_PERMUTATIONS_INDIVIDUALLY_ONLY_TRAIN_UNAMBIGUOUS_PERMUTATIONS
				#define LRP_PREPROCESSOR_POS_TAGGER_DATABASE_FILESYSTEM_AND_MAP_USE_6BIT_INDICES	//LRP3e9d
				#ifdef LRP_PREPROCESSOR_POS_TAGGER_DATABASE_FILESYSTEM_AND_MAP_USE_6BIT_INDICES
					#define LRP_PREPROCESSOR_POS_TAGGER_DATABASE_FILESYSTEM_POS_MAX_SIZE (64)	//6 bits
					#define LRP_PREPROCESSOR_POS_TAGGER_DATABASE_FILESYSTEM_POS_MAX_BITS (6)
				#endif
			#endif	
		#endif	

		#ifdef LRP_PREPROCESSOR_POS_TAGGER_GENERATE_DATABASE
			#define LRP_PREPROCESSOR_POS_TAGGER_GENERATE_DATABASE_DOC_XML_OUTPUT_START_FILE (0)	//0
			#define LRP_PREPROCESSOR_POS_TAGGER_GENERATE_DATABASE_DOC_XML_OUTPUT_NUMBER_OF_FILES (12)	//1203	//wiki dump files are generated with WikiExtractor (https://github.com/attardi/wikiextractor)	//121	
			#define LRP_PREPROCESSOR_POS_TAGGER_GENERATE_DATABASE_DOC_XML_OUTPUT_NAME_PART_A "wiki_"
			#define LRP_PREPROCESSOR_POS_TAGGER_GENERATE_DATABASE_DOC_XML_OUTPUT_NAME_PART_B_INDEX_NUMBER_OF_CHARACTERS (4)
			#define LRP_PREPROCESSOR_POS_TAGGER_GENERATE_DATABASE_DOC_XML_OUTPUT_NAME_PART_C ".xml"
			#define LRP_PREPROCESSOR_POS_TAGGER_GENERATE_DATABASE_DOC_XML_OUTPUT_FOLDER "/home/systemusername/soft/wiki/output"
			#define LRP_PREPROCESSOR_POS_TAGGER_GENERATE_DATABASE_WIKIDUMP_MULTIWORD_FILE_EXTENSION ".basic.multiword"
			#define LRP_PREPROCESSOR_POS_TAGGER_GENERATE_DATABASE_WIKIDUMP_MULTIWORD_FILE_NAME "wikidumpOutput.txt"
			//#define LRP_PREPROCESSOR_POS_TAGGER_POS_DEBUG
			//#define LRP_PREPROCESSOR_POS_TAGGER_INITIALISE_WORD_INDEX_LIST_FROM_WIKI_DUMP_TEXT	//NOT USED
		#endif
		#define LRP_PREPROCESSOR_INITIALISE_WORD_INDEX_LIST_FROM_LRP_FILES
	#endif
	
	#define LRP_PREPROCESSOR_POS_TAGGER_POS_AMBIGUITY_INFO_UNKNOWN (0)	//NB if POS info unknown (input/wiki text word not found in LRP word lists), then POSambiguityInfoFound = 0
#endif

//#define LRP_DEBUG_DISABLE_3d_CODE
#ifndef LRP_DEBUG_DISABLE_3d_CODE
	#define LRP_PREPROCESSOR_DERIVE_NOUN_VARIANTS
	
	#define LRP_PREPROCESSOR_DETERMINE_VERB_CASE_ADDITIONAL_EXTENDED	//activated LRP3d5f
#endif

//#define LRP_DEBUG_DISABLE_3b_CODE
#ifndef LRP_DEBUG_DISABLE_3b_CODE
	//#ifdef LRP_PREPROCESSOR	//has not yet been defined
		#ifdef USE_GIA
			#define LRP_PREPROCESSOR_RECORD_REFERENCES	//LRP3b2a	//required by GIAI
		#endif
		//#ifdef LRP_PREPROCESSOR_WORD_NLP_PARSABLE_PHRASE_SUPPORT_INTRAWORD_PUNCTUATION_MARK	//has not yet been defined
			#define LRP_PREPROCESSOR_WORD_NLP_PARSABLE_PHRASE_SUPPORT_ABBREVIATIONS	//LRP3b2e
			#ifdef LRP_PREPROCESSOR_WORD_NLP_PARSABLE_PHRASE_SUPPORT_ABBREVIATIONS
				#define LRP_PREPROCESSOR_WORD_NLP_PARSABLE_PHRASE_SUPPORT_ABBREVIATIONS_TITLE_PREFIXES_NUMBER_OF_TYPES (26)
				static string preprocessorSupportAbbreviationsTitlePrefixesArray[LRP_PREPROCESSOR_WORD_NLP_PARSABLE_PHRASE_SUPPORT_ABBREVIATIONS_TITLE_PREFIXES_NUMBER_OF_TYPES] = {"1Lt.", "1stLt.", "2Lt.", "2ndLt.", "Amb.", "BGen.", "BrigGen.", "Capt.", "Col.", "Dr.", "Drs.", "Gen.", "Gov.", "Hon.", "LtCol.", "LtGen.", "MSgt.", "Maj.", "MajGen.", "Mdme.", "Mr.", "Mrs.", "Ms.", "Msgr.", "Prof.", "Rev."};
			#endif
		//#endif
		#define LRP_PREPROCESSOR_WORD_NLP_PARSABLE_PHRASE_SUPPORT_APOSTROPHES_POSSESSION_AND_OMISSION	//LRP3b2e
		#define LRP_PREPROCESSOR_WORD_NLP_PARSABLE_PHRASE_SUPPORT_DOLLARS //LRP3b2e
		#ifdef USE_NLC
			#define LRP_PREPROCESSOR_WORD_EXTRACT_INDENTATION	//LRP3b3a upgraded for NLC
			#ifdef LRP_PREPROCESSOR_WORD_EXTRACT_INDENTATION
				#define LRP_PREPROCESSOR_INDENTATION_CHAR CHAR_TAB
			#endif
			#define LRP_PREPROCESSOR_WORD_REDUCE_QUOTES_TO_SINGLE_WORDS	//LRP2b4a	//disabled GIA2i36a	//LRP3b3a restored and upgraded for NLC
		#endif	
		#define LRP_PREPROCESSOR_WORD_NLP_PARSABLE_PHRASE_SUPPORT_MATH	//LRP3b3a	//required for NLC
		#ifdef LRP_PREPROCESSOR_WORD_NLP_PARSABLE_PHRASE_SUPPORT_MATH
			#define LRP_PREPROCESSOR_WORD_NLP_PARSABLE_PHRASE_SUPPORT_MATH_GROUPING	//LRP3b3a - required for current NLC implementation; e.g. see how preprocessorMathOperatorsEquivalentConjunctions are defined [need to detect individual opening/closing brackets]
		#endif
	//#endif
#endif


//#define LRP_DEBUG_DISABLE_3a_CODE
#ifndef LRP_DEBUG_DISABLE_3a_CODE
	#define LRP_PREPROCESSOR_FIND_EXISTING_RELATIONSHIP_IN_SENTENCE_ENFORCE_SAME_SENTENCE_CHECKS	//LRP3a6d
	
	#define LRP_PREPROCESSOR_WORD_REINSERT_NEWLINE_CHARACTERS_AFTER_EVERY_SENTENCE	//added LRP3a1a
	
	#define LRP_PREPROCESSOR
	#ifdef LRP_PREPROCESSOR
		//#define LRP_PREPROCESSOR_SUPPORT_PUNCTUATION_MARKS_WITH_PRECEEDING_WHITE_SPACE	//not yet coded: do not currently support punctuation marks with preceeding white space. Currently skip (do not parse) multiple white space/punctuation characters (eg ". "/".."/"  "/" .")	

		#define LRP_PREPROCESSOR_WORD_LOAD_WORD_LISTS
		
		
		#define LRP_PREPROCESSOR_INTERMEDIARY_MULTIWORD_FILE_EXTENSION ".intermediary.multiword"
		#define LRP_PREPROCESSOR_INTERMEDIARY_SENTENCE_FILE_EXTENSION ".intermediary.sentence"
		//#ifdef GIA_POS_REL_TRANSLATOR_HYBRID_EXECUTE_PRELIM_POS_TAGGER
			#define LRP_PREPROCESSOR_INTERMEDIARY_PRELIM_FILE_EXTENSION ".intermediary.prelim"
		//#endif
		#define LRP_PREPROCESSOR_OUTPUT_FOR_NLP_ONLY_FILE_EXTENSION ".forNLPonly"	
	#endif
#endif



#ifndef LRP_DEBUG_DISABLE_2i_CODE
	#define LRP_PREPROCESSOR_WORD_NLP_PARSABLE_PHRASE_SUPPORT_INTRAWORD_PUNCTUATION_MARK
	#ifdef LRP_PREPROCESSOR_WORD_NLP_PARSABLE_PHRASE_SUPPORT_INTRAWORD_PUNCTUATION_MARK
		#define LRP_PREPROCESSOR_WORD_NLP_PARSABLE_PHRASE_SUPPORT_FILENAMES_WITH_FULLSTOPS_AND_FLOATS_AND_TIMES	//LRP2i18a
	#endif
#endif

#ifndef GIA_DEBUG_DISABLE_2h_CODE
	//#ifdef GIA_SPATIOTEMPORAL_NETWORK	//not yet defined
		//#ifdef LRP_PREPROCESSOR_WORD	//not yet defined
			#define LRP_PREPROCESSOR_WORD_NORMALISE_PREPOSITIONS	//added GIA2h1a/14-November-2014 - required for NLC1m1a+
			#ifdef LRP_PREPROCESSOR_WORD_NORMALISE_PREPOSITIONS
				#define LRP_PREPROCESSOR_WORD_NORMALISE_PREPOSITIONS_INVERSE_TAG_NAME_NULL "NULL"
				#define LRP_PREPROCESSOR_WORD_LOAD_INVERSE_PREPOSITIONS_LIST
				#define LRP_PREPROCESSOR_WORD_NORMALISE_INVERSE_PREPOSITIONS
				#define LRP_PREPROCESSOR_WORD_NORMALISE_TWOWAY_PREPOSITIONS
				#ifdef LRP_PREPROCESSOR_WORD_NORMALISE_TWOWAY_PREPOSITIONS
					#ifdef GIA_DISABLE_CROSS_SENTENCE_REFERENCING
						#define LRP_PREPROCESSOR_WORD_NORMALISE_TWOWAY_PREPOSITIONS_DUAL_CONDITION_LINKS_DISABLED	//only create twoway condition links in derivatives (eg NLC)
					#else
						#define LRP_PREPROCESSOR_WORD_NORMALISE_TWOWAY_PREPOSITIONS_DUAL_CONDITION_LINKS_ENABLED	//required for GIA advanced referencing
					#endif
				#endif
				#ifdef USE_GIA
					#define LRP_PREPROCESSOR_WORD_DETECT_PREPOSITION_TYPE		//added GIA2h1a/14-November-2014 - required for NLC1m1a+
				#endif
			#endif
		//#endif
	//#endif
#endif
	
		
#define LRP_PREPROCESSOR_WORD
#ifdef LRP_PREPROCESSOR_WORD
	#define LRP_PREPROCESSOR_WORD_ORIGINAL	//includes multiword preposition reduction
	#define LRP_PREPROCESSOR	//required for legacy support of LRP_PREPROCESSOR_WORD
	#define LRP_PREPROCESSOR_WORD_MULTIWORD_REDUCTION
	#ifdef LRP_PREPROCESSOR_WORD_MULTIWORD_REDUCTION
		#ifdef USE_GIA
			#define LRP_PREPROCESSOR_WORD_REPLACE_OUTPUT_FOR_NLP_TEMPORARILY
		#endif
	#endif

	#define GIA_TRANSLATOR_CORRECT_IRREGULAR_VERB_LEMMAS
	#ifdef GIA_TRANSLATOR_CORRECT_IRREGULAR_VERB_LEMMAS
		//#define GIA_TRANSLATOR_CORRECT_IRREGULAR_VERB_LEMMAS_CONSERVATIVE	//added 28 October 2012b - requires LRP_PREPROCESSOR_WORD for reading of WikipediaIrregularVerbs.txt - this is used to normalise the tagging of continuous verbs (eg in the making of): it is not 100% successful as corrections are limited to irregular continous verbs (WikipediaIrregularVerbs.txt)
		#ifdef GIA_TRANSLATOR_CORRECT_IRREGULAR_VERB_LEMMAS_CONSERVATIVE
			#define LRP_PREPROCESSOR_WORD_LOAD_WORD_LISTS	//requires irregular verb list
		#endif
		#define GIA_TRANSLATOR_CORRECT_IRREGULAR_VERB_LEMMAS_LIBERAL		//alternate implementation added 5 July 2013 - requires LRP_PREPROCESSOR_WORD for reading of WordnetVerbs.txt - this is used to normalise the tagging of continuous verbs (eg in the making of)
		#ifdef GIA_TRANSLATOR_CORRECT_IRREGULAR_VERB_LEMMAS_LIBERAL
			#define LRP_PREPROCESSOR_WORD_LOAD_WORD_LISTS
			//#define GIA_TRANSLATOR_BACKUP_OF_OLD_GRAMMAR_EXECUTION_WITHOUT_BUG_CORRECTION
		#endif
		//#define GIA_TRANSLATOR_CORRECT_IRREGULAR_VERB_LEMMAS_OLD_IMPLEMENTATION
		#ifndef GIA_DEBUG_DISABLE_2h_CODE
			#define GIA_TRANSLATOR_CORRECT_IRREGULAR_VERB_LEMMAS_CORRECT_POS_TAGS_EVEN_IF_LEMMAS_DETECTED_BY_NLP_PROGRESSIVE_CASE		//this is required for both STANFORD_PARSER_USE_POS_TAGS (because stanford tags some verbs eg delivering as noun) and STANFORD_CORENLP_POS_TAGS_BUG_GIA_WORKAROUND_SET_DETERMINER_DEPENDENT_TO_NOUN (because it overwrites verb/vbg determiners eg delivering as noun)
			//#define GIA_TRANSLATOR_CORRECT_IRREGULAR_VERB_LEMMAS_CORRECT_POS_TAGS_EVEN_IF_LEMMAS_DETECTED_BY_NLP		//this would require thorough testing before enabling (plus it is not required at present)
		#endif
	#endif
	#define GIA_WORD_ORIG	//NB wordOrig is now used by more than just NLG (it is also used by LRP)
	//#define LRP_PREPROCESSOR_WORD_DISABLE_REDISTRIBUTE_RELATIONS_POST_NLP_MULTIWORD_PREPOSITION_REDUCTION
#endif


#define LRP_NLP_START_ENTITY_INDEX (1)
#define LRP_NLP_START_SENTENCE_INDEX (1)



//*******************************************************
//start LRP shared variables (could be moved to LRPsharedDefs.hpp):
//*******************************************************



//extracted from GIAsynRelTranslatorDefs.hpp;
	//moved from GIAtranslatorGrammar.h in GIA2b3a:
#define GRAMMATICAL_DETERMINER_DEFINITE "the"
#define GRAMMATICAL_DETERMINER_INDEFINITE_SINGULAR "a"
#define GRAMMATICAL_DETERMINER_INDEFINITE_PLURAL "some"
#define GRAMMATICAL_DETERMINER_INDEFINITE_SINGULAR_FIRST_LETTER_VOWEL "an"
#define GRAMMATICAL_DETERMINER_DEFINITE_EACH "each"
#define GRAMMATICAL_DETERMINER_DEFINITE_EVERY "every"
#define GRAMMATICAL_DETERMINER_INDEFINITE_ALL "all"
//not required for Stanford CoreNLP as "an" lemma is "a" (but is required for Relex)
#define GRAMMATICAL_DETERMINER_INDEFINITE_NUMBER_OF_TYPES (2)
static string grammaticalDeterminerIndefiniteArray[GRAMMATICAL_DETERMINER_INDEFINITE_NUMBER_OF_TYPES] = {GRAMMATICAL_DETERMINER_INDEFINITE_SINGULAR, GRAMMATICAL_DETERMINER_INDEFINITE_SINGULAR_FIRST_LETTER_VOWEL};	//NB this intentionally discludes GRAMMATICAL_DETERMINER_INDEFINITE_PLURAL "some" as this is handled the same as a definite determinier by GIA2 POS tag system
#define GRAMMATICAL_DETERMINER_DEFINITE_NUMBER_OF_TYPES (3)
static string grammaticalDeterminerDefiniteArray[GRAMMATICAL_DETERMINER_DEFINITE_NUMBER_OF_TYPES] = {GRAMMATICAL_DETERMINER_DEFINITE, GRAMMATICAL_DETERMINER_DEFINITE_EACH, GRAMMATICAL_DETERMINER_DEFINITE_EVERY};	//NB this intentionally discludes GRAMMATICAL_DETERMINER_INDEFINITE_PLURAL "some" as this is handled the same as a definite determinier by GIA2 POS tag system

#define GRAMMATICAL_AUXILIARY_BEING_PRESENT_SINGULAR "is"



//extracted from GIAentity.hpp;
#define LRP_SHARED_ENTITY_TYPE_UNDEFINED (-1)
#define LRP_SHARED_ENTITY_TYPE_NETWORK_INDEX (0)
#define LRP_SHARED_ENTITY_TYPE_SUBSTANCE (1)
#define LRP_SHARED_ENTITY_TYPE_CONCEPT (2)
#define LRP_SHARED_ENTITY_TYPE_ACTION (3)
#define LRP_SHARED_ENTITY_TYPE_CONDITION (4)
#define LRP_SHARED_ENTITY_TYPE_PROPERTY (5)
#define LRP_SHARED_ENTITY_TYPE_DEFINITION (6)
#define LRP_SHARED_ENTITY_TYPE_QUALITY (7)
#define LRP_SHARED_ENTITY_NUMBER_OF_TYPES (8)

#define LRP_SHARED_ENTITY_TYPE_LOGIC_REFERENCE (11)

#define LRP_SHARED_ENTITY_CONNECTION_TYPE_UNDEFINED (0)
#define LRP_SHARED_ENTITY_CONNECTION_TYPE_SAMEREFERENCESET (1)
#define LRP_SHARED_ENTITY_CONNECTION_TYPE_DIFFREFERENCESET (2)
#define LRP_SHARED_ENTITY_CONNECTION_TYPE_REFERENCE (3)


//extracted from GIAdraw.hpp;
#define LRP_SHARED_ENTITY_TYPE_UNDEFINED_COLOUR (SHARED_COLOUR_BLACK)
#define LRP_SHARED_ENTITY_TYPE_NETWORK_INDEX_COLOUR (SHARED_COLOUR_MAGENTA)
#define LRP_SHARED_ENTITY_TYPE_SUBSTANCE_COLOUR (SHARED_COLOUR_LIGHTGREY)
#define LRP_SHARED_ENTITY_TYPE_CONCEPT_COLOUR (SHARED_COLOUR_BLUE)
#define LRP_SHARED_ENTITY_TYPE_ACTION_COLOUR (SHARED_COLOUR_GREEN)
#define LRP_SHARED_ENTITY_TYPE_CONDITION_COLOUR (SHARED_COLOUR_RED)
#define LRP_SHARED_ENTITY_TYPE_PROPERTY_COLOUR (SHARED_COLOUR_CYAN)
#define LRP_SHARED_ENTITY_TYPE_DEFINITION_COLOUR (SHARED_COLOUR_BLUE)
#define LRP_SHARED_ENTITY_TYPE_QUALITY_COLOUR (SHARED_COLOUR_AQUA)

#define LRP_SHARED_ENTITY_TYPE_LOGIC_REFERENCE_COLOUR (SHARED_COLOUR_DARKGREEN)

#define LRP_SHARED_ENTITY_CONNECTION_TYPE_UNDEFINED_COLOUR (SHARED_COLOUR_BLACK)
#define LRP_SHARED_ENTITY_CONNECTION_TYPE_SAMEREFERENCESET_COLOUR (SHARED_COLOUR_GREEN)
#define LRP_SHARED_ENTITY_CONNECTION_TYPE_DIFFREFERENCESET_COLOUR (SHARED_COLOUR_RED)
#define LRP_SHARED_ENTITY_CONNECTION_TYPE_REFERENCE_COLOUR (SHARED_COLOUR_YELLOW)



//from GIAsemRelTranslatorDefs.hpp;
#define LRP_SHARED_POS_TYPE_UNDEFINED 0
#define LRP_SHARED_POS_TYPE_CONJUNCTION 1
#define LRP_SHARED_POS_TYPE_NUMBER 2
#define LRP_SHARED_POS_TYPE_DETERMINER 3
#define LRP_SHARED_POS_TYPE_UNKNOWN 4
#define LRP_SHARED_POS_TYPE_PREDETERMINER 5
#define LRP_SHARED_POS_TYPE_POSSESSIVEENDING 6
#define LRP_SHARED_POS_TYPE_MODALAUXILIARY 7
#define LRP_SHARED_POS_TYPE_PREPOSITION 8
#define LRP_SHARED_POS_TYPE_ADJECTIVE 9
#define LRP_SHARED_POS_TYPE_NOUN 10
#define LRP_SHARED_POS_TYPE_ADVERB 11
#define LRP_SHARED_POS_TYPE_PRONOUN_PERSONAL 12
#define LRP_SHARED_POS_TYPE_PRONOUN_POSSESSIVE 13
#define LRP_SHARED_POS_TYPE_PARTICLE 14
#define LRP_SHARED_POS_TYPE_INTERJECTION 15
#define LRP_SHARED_POS_TYPE_VERB 16
#define LRP_SHARED_POS_TYPE_WH 17
#define LRP_SHARED_POS_TYPE_PUNCTUATION_QUOTE 18
#define LRP_SHARED_POS_TYPE_PUNCTUATION_DIVISION 19
#define LRP_SHARED_POS_TYPE_PUNCTUATION_END_OF_SENTENCE 20
#define LRP_SHARED_POS_TYPE_AUXILIARY_BEING 21
#define LRP_SHARED_POS_TYPE_AUXILIARY_HAVING 22
#define LRP_SHARED_POS_TYPE_AUXILIARY_DOING 23
#define LRP_SHARED_POS_TYPE_AUXILIARY 24
#define LRP_SHARED_POS_TYPE_PRONOUN_DEMONSTRATIVE 25
#define LRP_SHARED_POS_TYPE_PRONOUN_INDEFINITE 26
#define LRP_SHARED_POS_TYPE_PRONOUN_INTERROGATIVE 27
#define LRP_SHARED_POS_TYPE_PRONOUN_PERSONAL_OBJECT 28
#define LRP_SHARED_POS_TYPE_PRONOUN_PERSONAL_SUBJECT 29
#define LRP_SHARED_POS_TYPE_PRONOUN_POSSESSIVE_ADJECTIVE 30
#define LRP_SHARED_POS_TYPE_PRONOUN_POSSESSIVE_ALONE 31
#define LRP_SHARED_POS_TYPE_PRONOUN_REFLEXIVE 32
#define LRP_SHARED_POS_TYPE_PRONOUN_RELATIVE 33
#define LRP_SHARED_POS_TYPE_CONJUNCTION_COORDINATING 34
#define LRP_SHARED_POS_TYPE_CONJUNCTION_SUBCOORDINATING 35
#define LRP_SHARED_POS_TYPE_CONJUNCTION_CORRELATIVE_FIRST 36	
#define LRP_SHARED_POS_TYPE_CONJUNCTION_CORRELATIVE_SECOND 37
#define LRP_SHARED_POS_TYPE_DATE 38
#define LRP_SHARED_POS_TYPE_UNIT 39
#define LRP_SHARED_POS_TYPE_MONEY 40
#define LRP_SHARED_POS_TYPE_TITLE 41
#define LRP_SHARED_POS_TYPE_PROPERNOUN_FIRST_MALE 42
#define LRP_SHARED_POS_TYPE_PROPERNOUN_FIRST_FEMALE 43
#define LRP_SHARED_POS_TYPE_PROPERNOUN_FAMILY 44
#define LRP_SHARED_POS_TYPE_PROPERNOUN_PLACE 45
#define LRP_SHARED_POS_TYPE_POSINSERTTEMPLATE5 46
#define LRP_SHARED_POS_TYPE_POSINSERTTEMPLATE6 47
#define LRP_SHARED_POS_TYPE_POSINSERTTEMPLATE7 48
#define LRP_SHARED_POS_TYPE_POSINSERTTEMPLATE8 49
#define LRP_SHARED_POS_TYPE_POSINSERTTEMPLATE9 50
#define LRP_SHARED_POS_TYPE_POSINSERTTEMPLATE0 51
#define LRP_SHARED_POS_TYPE_ARRAY_NUMBER_OF_TYPES (52)	

#define LRP_SHARED_POS_TYPE_NAME_PROPERNOUN 101	//used by SANIgenerateCompactIdentifyReferenceSetsClass only

#define LRP_SHARED_POS_TYPE_NAME_UNDEFINED "undefined"
#define LRP_SHARED_POS_TYPE_NAME_CONJUNCTION "conjunction"
#define LRP_SHARED_POS_TYPE_NAME_NUMBER "number"
#define LRP_SHARED_POS_TYPE_NAME_DETERMINER "determiner"
#define LRP_SHARED_POS_TYPE_NAME_UNKNOWN "unknown"
#define LRP_SHARED_POS_TYPE_NAME_PREDETERMINER "predeterminer"
#define LRP_SHARED_POS_TYPE_NAME_POSSESSIVEENDING "possessiveEnding"
#define LRP_SHARED_POS_TYPE_NAME_MODALAUXILIARY "modalAuxiliary"
#define LRP_SHARED_POS_TYPE_NAME_PREPOSITION "preposition"
#define LRP_SHARED_POS_TYPE_NAME_ADJECTIVE "adjective"
#define LRP_SHARED_POS_TYPE_NAME_NOUN "noun"
#define LRP_SHARED_POS_TYPE_NAME_ADVERB "adverb"
#define LRP_SHARED_POS_TYPE_NAME_PRONOUN_PERSONAL "pronounPersonal"
#define LRP_SHARED_POS_TYPE_NAME_PRONOUN_POSSESSIVE "pronounPossessive"
#define LRP_SHARED_POS_TYPE_NAME_PARTICLE "particle"
#define LRP_SHARED_POS_TYPE_NAME_INTERJECTION "interjection"
#define LRP_SHARED_POS_TYPE_NAME_VERB "verb"
#define LRP_SHARED_POS_TYPE_NAME_WH "wh"
#define LRP_SHARED_POS_TYPE_NAME_PUNCTUATION_QUOTE "punctuationQuote"
#define LRP_SHARED_POS_TYPE_NAME_PUNCTUATION_DIVISION "punctuationDivision"
#define LRP_SHARED_POS_TYPE_NAME_PUNCTUATION_END_OF_SENTENCE "punctuationEndOfSentence"
#define LRP_SHARED_POS_TYPE_NAME_AUXILIARY_BEING "auxiliaryBeing"
#define LRP_SHARED_POS_TYPE_NAME_AUXILIARY_HAVING "auxiliaryHaving"
#define LRP_SHARED_POS_TYPE_NAME_AUXILIARY_DOING "auxiliaryDoing"
#define LRP_SHARED_POS_TYPE_NAME_AUXILIARY "auxiliary"
#define LRP_SHARED_POS_TYPE_NAME_PRONOUN_DEMONSTRATIVE "pronounDemonstrative"	
#define LRP_SHARED_POS_TYPE_NAME_PRONOUN_INDEFINITE "pronounIndefinite"
#define LRP_SHARED_POS_TYPE_NAME_PRONOUN_INTERROGATIVE "pronounInterrogative"
#define LRP_SHARED_POS_TYPE_NAME_PRONOUN_PERSONAL_OBJECT "pronounPersonalObject"
#define LRP_SHARED_POS_TYPE_NAME_PRONOUN_PERSONAL_SUBJECT "pronounPersonalSubject"
#define LRP_SHARED_POS_TYPE_NAME_PRONOUN_POSSESSIVE_ADJECTIVE "pronounPossessiveAdjective"
#define LRP_SHARED_POS_TYPE_NAME_PRONOUN_POSSESSIVE_ALONE "pronounPossessiveAlone"
#define LRP_SHARED_POS_TYPE_NAME_PRONOUN_REFLEXIVE "pronounReflexive"
#define LRP_SHARED_POS_TYPE_NAME_PRONOUN_RELATIVE "pronounRelative"
#define LRP_SHARED_POS_TYPE_NAME_CONJUNCTION_COORDINATING "conjunctionCoordinating"
#define LRP_SHARED_POS_TYPE_NAME_CONJUNCTION_SUBCOORDINATING "conjunctionSubcoordinating"
#define LRP_SHARED_POS_TYPE_NAME_CONJUNCTION_CORRELATIVE_FIRST "conjunctionCorrelativeFirst"
#define LRP_SHARED_POS_TYPE_NAME_CONJUNCTION_CORRELATIVE_SECOND "conjunctionCorrelativeSecond"
#define LRP_SHARED_POS_TYPE_NAME_DATE "date"
#define LRP_SHARED_POS_TYPE_NAME_UNIT "unit"
#define LRP_SHARED_POS_TYPE_NAME_MONEY "money"
#define LRP_SHARED_POS_TYPE_NAME_TITLE "title"
#define LRP_SHARED_POS_TYPE_NAME_PROPERNOUN_FIRST_MALE "propernounFirstMale"
#define LRP_SHARED_POS_TYPE_NAME_PROPERNOUN_FIRST_FEMALE "propernounFirstFemale"
#define LRP_SHARED_POS_TYPE_NAME_PROPERNOUN_FAMILY "propernounFamily"
#define LRP_SHARED_POS_TYPE_NAME_PROPERNOUN_PLACE "propernounPlace"
#define LRP_SHARED_POS_TYPE_NAME_POSINSERTTEMPLATE5 "posinserttemplate5"
#define LRP_SHARED_POS_TYPE_NAME_POSINSERTTEMPLATE6 "posinserttemplate6"
#define LRP_SHARED_POS_TYPE_NAME_POSINSERTTEMPLATE7 "posinserttemplate7"
#define LRP_SHARED_POS_TYPE_NAME_POSINSERTTEMPLATE8 "posinserttemplate8"
#define LRP_SHARED_POS_TYPE_NAME_POSINSERTTEMPLATE9 "posinserttemplate9"
#define LRP_SHARED_POS_TYPE_NAME_POSINSERTTEMPLATE0 "posinserttemplate10"



//from GIAentityNodeClass.hpp/GIAentityConnectionClass.hpp;
#define GRAMMATICAL_TENSE_UNDEFINED 0
#define GRAMMATICAL_TENSE_PRESENT 1		//eg mow / ~VBP
#define GRAMMATICAL_TENSE_PAST 2		//eg mowed / ~VBD
#define GRAMMATICAL_TENSE_FUTURE 3		//eg will mow / ?
#define GRAMMATICAL_TENSE_NUMBER_OF_TYPES 4
#define GRAMMATICAL_TENSE_PRESENT_STRING "1"
#define GRAMMATICAL_TENSE_PAST_STRING "2"
#define GRAMMATICAL_TENSE_FUTURE_STRING "3"
#define GRAMMATICAL_TENSE_MODIFIER_PROGRESSIVE 0	//eg mowing / ~VBG
#define GRAMMATICAL_TENSE_MODIFIER_PERFECT 1
#define GRAMMATICAL_TENSE_MODIFIER_PASSIVE 2		//NB present passive is interpreted by GIA to be the same as state; eg is mowed (as opposed to was mowed)
#define GRAMMATICAL_TENSE_MODIFIER_INFINITIVE 3		//eg to mow / ~VB	//added 2h2c: _ment/_ion nouns, eg enjoyment/abolition
#define GRAMMATICAL_TENSE_MODIFIER_IMPERATIVE 4		//eg Mow the grass! / ~VB
#define GRAMMATICAL_TENSE_MODIFIER_POTENTIAL 5	//added 2h2a/2h2c: _able/_ive adjectives (ignore nouns)	//eg mowable / affirmative
#define GRAMMATICAL_TENSE_MODIFIER_POTENTIAL_INVERSE 6
#define GRAMMATICAL_TENSE_MODIFIER_STATE 7	//added 2h2a	//eg is mowed (as opposed to was mowed)	//used for both states and affections - note noun versus verb base forms are not distinguished here by POS tagger; both are assigned VBN
#define GRAMMATICAL_TENSE_MODIFIER_DESCRIPTION 8	//added 2h2d: _ment/_ion nouns	//eg movement / transition	//note these are different than action networkIndexes, as these define an instance of an action, not an action in general; eg "the movement"/"the transition"
#define GRAMMATICAL_TENSE_MODIFIER_NUMBER_OF_TYPES 9
#define GRAMMATICAL_TENSE_MODIFIER_INFINITIVE_OR_IMPERATIVE_OR_PRESENT_NOT_THIRD_PERSON_SINGULAR_OR_STATE_TEMP (7)
#define GRAMMATICAL_TENSE_MODIFIER_PAST_TENSE_OR_PAST_PARTICIPLE_OR_STATE_TEMP (8)
#define GRAMMATICAL_TENSE_MODIFIER_PROGRESSIVE_TEMP (9)
#define GRAMMATICAL_TENSE_MODIFIER_POTENTIAL_TEMP (10)
#define GRAMMATICAL_TENSE_MODIFIER_POTENTIAL_INVERSE_TEMP (11)
#define GRAMMATICAL_TENSE_MODIFIER_DESCRIPTION_TEMP (12)


//from GIAsynRelTranslatorDefs.hpp;
/*
stanford parser tense
https://mailman.stanford.edu/pipermail/parser-user/2008-September/000073.html
Is there a way to identify the main verb of the sentence, and following
that, the tense of the sentence? So far I've been identifying the first
'VBP', 'VBD' or 'VBZ' tagged word, and assigning present or past tense
according to these tags.

stanford pos tagger specification
	http://bulba.sdsu.edu/jeanette/thesis/PennTags.html

http://nlp.stanford.edu/software/tagger.shtml
	Part-of-speech name abbreviations: The English taggers use the Penn Treebank tag set.

J93-2004.pdf;
VB Verb, base form
VBD Verb, past tense
VBG Verb, gerund/present participle
VBN Verb, past participle
VBP Verb, non-3rd ps. sing. present
VBZ Verb, 3rd ps. sing. present

NN Noun, singular or mass
NNS Noun, plural
NNP Proper noun, singular
NNPS Proper noun, plural

sing/VB be/VB do/VB have/VB			[N/A]
sings/VBZ is/VBZ does/VBZ has/VBZ		[present]
sang/VBD was/VBD did/VBD had/VBD		[past]
singing/VBG being/VBG doing/VBG having/VBG	[present participle / continuous]
sung/VBN been/VBN done/VBN had/VBN		[past participle]

proper noun versus noun
http://www.chompchomp.com/terms/propernoun.htm

http://www.cis.upenn.edu/~treebank/

http://stackoverflow.com/questions/1833252/java-stanford-nlp-part-of-speech-labels

stanford pos tagger "future tense"
www.lancs.ac.uk/staff/hardiea/cl03_urdu.pdf
for example, the verbal auxiliary element indicating future tense: see Schmidt 1999: 106, Bhatia and Koul 2000: 331-332

//NER; stanford NER person organization
Recognizes named (PERSON, LOCATION, ORGANIZATION, MISC) and numerical entities (DATE, TIME, MONEY, NUMBER)
	http://nlp.stanford.edu/software/corenlp.shtml
*/
//stanfordPOS;
	//from J93-2004-pennTreebankPOStagsets.pdf
	//conjunction
#define FEATURE_POS_TAG_COORDINATING_CONJUNCTION_CC "CC"	//"and" is considered a noun by Relex, eg There are 3 chickens and 4 bats.
#define FEATURE_POS_TAG_CONJUNCTION (FEATURE_POS_TAG_COORDINATING_CONJUNCTION_CC)
	//number
#define FEATURE_POS_TAG_CARDINALNUMBER_CD "CD"			//"3" is considered an adjective by Relex, eg There are 3 chickens.	//required for when "one" is misinterpreted as the number 'one', or for times eg "6:45"
	//determiner
#define FEATURE_POS_TAG_DETERMINER "DET"			//"the" is considered a determiner by Relex
	//additional (unknown)
#define FEATURE_POS_TAG_UNKNOWN_FOREIGNWORD_FW "FW"		//ASSUME foreign word is considered a WORD by Relex
#define FEATURE_POS_TAG_UNKNOWN_EXISTENTIAL_THERE "EX"		//"There" is considered a WORD by Relex, eg There is a ball.
#define FEATURE_POS_TAG_UNKNOWN_LISTITEMMARKER_LS "LS"		//ASSUME list marker is considered a WORD by Relex,
#define FEATURE_POS_TAG_UNKNOWN_SYMBOL_SYM "SYM"		//ASSUME symbol is considered a WORD by Relex
#define FEATURE_POS_TAG_PUNCTUATION_HASH "#"			//"#" is considered a WORD by Relex
#define FEATURE_POS_TAG_PUNCTUATION_DOLLAR "$"			//"$" is considered a WORD by Relex, eg Tom moves the $5 note.
#ifdef GIA_SEM_REL_TRANSLATOR_SUPPORT_QUERIES
#define FEATURE_POS_TAG_PUNCTUATION_QUESTIONMARK "?"		//"?" is considered a WORD by Relex? [CHECKTHIS] //no PENN treebank entry for question mark?
#endif
	//predeterminer
#define FEATURE_POS_TAG_UNKNOWN_PREDETERMINER_PDT "PDT"		//"all" is considered an adjective by Relex, eg He fights all the time.	//http://en.wiktionary.org/wiki/predeterminer		//Parsed incorrectly by Stanford Parser: "three times" is considered an adjective/noun combination by Relex, eg It moves at three times the rate.
	//posessive ending
#define FEATURE_POS_TAG_UNKNOWN_POSSESSIVEENDING_POS "POS"	//"'s" is considered an adjective by Relex, eg Tom's car is blue.
	//modal auxiliary
#define FEATURE_POS_TAG_MODALAUXILIARY_MD "MD"	//Modal		//can, could, may, might, must, shall, should, will, would - http://en.wikipedia.org/wiki/Modal_verb
	//preposition
#define FEATURE_POS_TAG_PREPOSITION_IN "IN"	//Preposition/subordinating conjunction
#define FEATURE_POS_TAG_PREPOSITION_TO "TO"	//to	//"to" is considered a preposition by Relex, eg He moves the bike to the farm..	//to is a particle is it not?
	//adjective
#define FEATURE_POS_TAG_ADJECTIVE_JJ "JJ"	//Adjective
#define FEATURE_POS_TAG_ADJECTIVE_COMPARATIVE_JJR "JJR"	//Adjective, comparative
#define FEATURE_POS_TAG_ADJECTIVE_SUPERLATIVE_JJS "JJS"	//Adjective, superlative
	//noun
#define FEATURE_POS_TAG_NOUN_NN "NN"	//Noun, singular or mass
#define FEATURE_POS_TAG_NOUN_NNS "NNS"	//Noun, plural
#define FEATURE_POS_TAG_NOUN_NNP "NNP"	//Proper noun, singular
#define FEATURE_POS_TAG_NOUN_NNPS "NNPS"	//Proper noun, plural
	//adverb
#define FEATURE_POS_TAG_ADVERB_RB "RB"	//Adverb
#define FEATURE_POS_TAG_ADVERB_COMPARATIVE_RBR "RBR"	//Adverb, comparative
#define FEATURE_POS_TAG_ADVERB_SUPERLATIVE_RBS "RBS"	//Adverb, superlative
	//pronoun personal
#define FEATURE_POS_TAG_PRONOUN_PERSONAL_PRONOUN_PRP "PRP"		//"He" is considered a WORD by Relex (with pronoun flag), eg He will be fine.
	//pronoun possessive
#define FEATURE_POS_TAG_PRONOUN_POSSESSIVE_PRONOUN_PPDOLLAR "PP$"	//"His" is considered a adjective by Relex (with pronoun flag), eg His car is fast.
	//particle
#define FEATURE_POS_TAG_PARTICLE_RP "RP"			//Particle	//http://en.wikipedia.org/wiki/Grammatical_particle
	//interjection
#define FEATURE_POS_TAG_INTERJECTION_UH "UH"			//Interjection	//interjections currently crash in GIA with Relex
	//verb
#define FEATURE_POS_TAG_VERB_VB "VB"	//Verb, base form
#define FEATURE_POS_TAG_VERB_VBD "VBD"	//Verb, past tense
#define FEATURE_POS_TAG_VERB_VBG "VBG"	//Verb, gerund/present participle	//continuous/progressive variant (e.g. riding)
#define FEATURE_POS_TAG_VERB_VBN "VBN"	//Verb, past participle
#define FEATURE_POS_TAG_VERB_VBP "VBP"	//Verb, non-3rd ps. sing. present
#define FEATURE_POS_TAG_VERB_VBZ "VBZ"	//Verb, 3rd ps. sing. present
//#ifndef LRP_PREPROCESSOR_GRAMMATICALLY_STRICT_VERB_VARIANTS_ONLY
//#ifdef GIA_NONSTANDARD_INTERMEDIARY_VERB_TYPES
	//these are not technically verbs (but are designated as actions/action concepts by GIA so are often treated the same): 
	//#ifdef GIA_FEATURE_POS_TAG_VERB_POTENTIAL
	#define FEATURE_POS_TAG_VERB_VBPOTENTIAL "VBPOTENTIAL"
	//#ifdef GIA_FEATURE_POS_TAG_VERB_POTENTIAL_INVERSE
	#define FEATURE_POS_TAG_VERB_VBPOTENTIALINVERSE "VBPOTENTIALINVERSE"
	//#endif
	//#endif
	//#ifdef GIA_FEATURE_POS_TAG_VERB_STATE
	#define FEATURE_POS_TAG_VERB_VBSTATE "VBSTATE"
	//#endif
	//#ifdef GIA_FEATURE_POS_TAG_VERB_DESCRIPTION
	#define FEATURE_POS_TAG_VERB_VBDESCRIPTION "VBDESCRIPTION"
	//#endif
//#endif
//#endif
	//wh
#define FEATURE_POS_TAG_WH_DETERMINER_WDT "WDT"				//"What"/"Which" is considered an adjective by Relex, eg What time is it?/Which marble is it?
#define FEATURE_POS_TAG_WH_PRONOUN_WP "WP"				//"What" is considered a WORD by Relex, eg What happened?
#define FEATURE_POS_TAG_WH_POSSESIVEPRONOUN_WPDOLLAR "WP$"
#define FEATURE_POS_TAG_WH_ADVERB_WRB "WRB"				//"Where" is considered an adverb by Relex, eg Where did it happen?
	//punctuation division
#define FEATURE_POS_TAG_PUNCTUATION_DIVISION_COMMA ","			//"," is considered a conjunction by Relex, eg The man moves, then he runs.
#define FEATURE_POS_TAG_PUNCTUATION_DIVISION_COLON_OR_SEMICOLON ":"	//":"/";" is considered a conjunction by Relex, eg The man moves: then he runs.
	//punctuation quote
#define FEATURE_POS_TAG_PUNCTUATION_QUOTE_FULLSTOP "."			//"." is considered a punctuation by Relex
#define FEATURE_POS_TAG_PUNCTUATION_QUOTE_LEFTBRACKET "("		//")" is considered a punctuation by Relex
#define FEATURE_POS_TAG_PUNCTUATION_QUOTE_RIGHTBRACKET ")"		//"(" is considered a punctuation by Relex
#define FEATURE_POS_TAG_PUNCTUATION_QUOTE_STRAIGHTDOUBLEQUOTE "\""	//" is ignored by Relex
#define FEATURE_POS_TAG_PUNCTUATION_QUOTE_LEFTOPENSINGLEQUOTE "'"	//"'" is considered a WORD by Relex
#define FEATURE_POS_TAG_PUNCTUATION_QUOTE_LEFTOPENDOUBLEQUOTE "\""	//" is ignored by Relex
#define FEATURE_POS_TAG_PUNCTUATION_QUOTE_RIGHTCLOSESINGLEQUOTE "'"	//"'" is considered a WORD by Relex
#define FEATURE_POS_TAG_PUNCTUATION_QUOTE_RIGHTCLOSEDOUBLEQUOTE "\""	//" is ignored by Relex
//additional values from https://universaldependencies.org/docs/en/pos/all.html#al-en-pos/AUX;
#define FEATURE_POS_TAG_AUXILIARY_AUX "AUX"
#define FEATURE_POS_TAG_PRONOUN_PRON "PRON"
#define FEATURE_POS_TAG_SUBCOORDINATING_CONJUNCTION_SCONJ "SCONJ"


//*******************************************************
//end LRP shared variables
//*******************************************************



#endif
